App.functions = [{"name":"setVar","n":["name","value"],"t":"(name: \"\"; value: )","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":["name","value"],"markdown_text":"","d":true,"markdownfile":[]},{"name":"getVar","n":["name"],"t":"(name: \"\"; default: )","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":["name","default"],"markdown_text":"","d":true,"markdownfile":null},{"name":"select","n":["table","field"],"t":"(table: ''; cycle: ; hash: ; field: ''; where: '' = ; order: '' asc)","m":["where","order"],"kategoriya_funkcii":"1","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","order","tfield","sfield"],"markdown_text":"### <a name=\"fn-select\"><\/a>select\n\nСложность: **<2>**\n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: select(table: ''; cycle: ; hash: ; field: ''; where: '' = ; order: '' asc)\n```\nВозвращает [одно][14] значение из поля `field:` таблицы `table:`.\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] таблица из которой берутся значения.\n\n+ **field** — [name-параметр][3] поле в таблице `table:`. \n\n**Необязательные параметры**\n\n+ **cycle** — определяет цикл, если таблица `table:` является [расчетной в цикле][1].\t\n\t\n\t+ Может передаваться только как [одно или список][14] [чисел][5].\n\t+ Параметр отсутствует, если таблица `table:` находится в [дереве][15].\n\t\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Параметр может отсутствовать, если поле не содержит строк (расположено вне [строчной части][13] таблицы). Если параметр отсутсвует для выборки из поля [строчной части][13], то результатом работы функции будет является [одно][14] первое значение в соответсвии с сортировкой заданой в `order:`.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям выбираются значения из нескольких строк, то результатом работы функции будет является [одно][14] первое значение в соответсвии с сортировкой заданой в `order:`.\n\t+ Если по условиям не выбирается ни одной строки, то результатом работы функции будет является [пустота][16].\n\n>> Поля типов [Селект (множественный)][36], [Селект-дерево (множественный)][37] и [Данные][38] могут выбираться с оператором сравнения `==`. В этом случае ищется полное совпадение, а не пересечение значения поля с заданным в `where:` значением.\n>> Поиск по содержимому поле [Данные][38] в простых таблицах может по-разному себя вести в зависимости от того, сохранено число-значение как строка или как число.\n\n+ **order** — [name-параметр][3] поле в таблице `table:`, по которому будет осуществляется сортировка.\n\n\t+ Множественный параметр — если указано несколько параметров `order:`, то сортировка будет осуществлена последовательно.\n\t+ Если параметр отсутсвует, то сортировка будет произведена в произвольном порядке.\n\t+ asc — по возрастанию\n\t+ desc — по убыванию\n\t\n+ **sfield** — [name-параметр][3] поле типа [Селект][36] или [Селект-дерево][43], для которого нужно выбрать и вернуть отображаемое значение, а не основание.\n\n+ **tfield** — [name-параметр][3] поле, исползующееся для расчета значений селектов в запрошенных в `sfield:` полях.\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n*zakazy (cycle_id: 1)*\nid | nomer_zakaza\n- | -\n1 | 98\n2 | 99\n3 | 100\n\n```totum\nexample: select(table: 'zakazy'; cycle: 1; field: 'id'; where: 'nomer_zakaza' = 100)\n\n\/\/ Результат: 3\n```","d":false,"markdownfile":[{"ext":"md","file":"343_23_markdownfile.md","name":"func_select.md","size":5429}]},{"name":"selectList","n":["table","field"],"t":"(table: ''; cycle: ; hash: ; field: ''; where: '' = ; order: '' asc)","m":["where","order"],"kategoriya_funkcii":"1","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","order","tfield","sfield"],"markdown_text":"### <a name=\"fn-selectList\"><\/a>selectList\n\nСложность: **<2>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: selectList(table: ''; cycle: ; hash: ; field: ''; where: '' = ; order: '' asc)\n```\nВозвращает [список значений][14] из строк поля `field:` таблицы `table:` в соответсвии с сортировкой заданой в `order:`.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] таблица из которой берутся значения.\n\n+ **field** — [name-параметр][3] поле в таблице `table:`. \n\n**Необязательные параметры**\n\n+ **cycle** — определяет цикл, если таблица `table:` является [рассчетной в цикле][1].\t\n\t\n\t+ Может передаваться только как [одно или список][14] [чисел][5].\n\t+ Параметр отсутствует, если таблица `table:` находится в [дереве][15] \n\t\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Выборка из полей вне [строчной части][13] невозможна.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `field:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям выбираются значения только из одной строки, то результатом работы функции будет является [список][14] с одним значением.\n\t+ Если по условиям не выбирается ни одной стоки, то результатом работы функции будет является [пустой список][17].\n\t\n+ **order** — [name-параметр][3] поле в таблице `table:`, по которому будет осуществляется сортировка.\n\n\t+ Множественный параметр — если указано несколько параметров `order:`, то сортировка будет осуществлена последовательно.\n\t+ Если параметр отсутсвует, то сортировка будет произведена в произвольном порядке.\n\t+ asc — по возрастанию\n\t+ desc — по убыванию\n\t\n+ **sfield** — [name-параметр][3] поле типа [Селект][36] или [Селект-дерево][43], для которого нужно выбрать и вернуть отображаемое значение, а не основание.\n\n+ **tfield** — [name-параметр][3] поле, исползующееся для расчета значений селектов в запрошенных в `sfield:` полях.\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n*zakazy*\n| id   | nomer_zakaza |\n| ---- | ------------ |\n| 1    | 98           |\n| 2    | 99           |\n| 3    | 100          |\n\n```totum\nexample: selectlist(table: 'zakazy'; field: 'id'; where: 'nomer_zakaza' >= 99)\n\n\/\/ Результат: [2,3]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_24_markdownfile.md","name":"func_selectList.md","size":4410}]},{"name":"selectRowListForSelect","n":["table","field"],"t":"(table: ''; cycle: ; bfield: 'id'; field: ''; where: '' = ; order: '' asc; section: ''; preview: '')","m":["where","order","preview"],"kategoriya_funkcii":"1","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","order","section","preview","bfield","tfield"],"markdown_text":"### <a name=\"fn-selectRowListForSelect\"><\/a>selectRowListForSelect\n\nСложность: **<4>**; \n\nДоступен в секциях: [Код селекта][4].\n```totum\n=: selectRowListForSelect(table: ''; cycle: ; bfield: 'id'; field: ''; order: '' asc; where: '' = ; section: ''; preview: '')\n```\nВозвращает специальный [список][14] [ассоциативных массивов][30] для формирования отображения Селектов.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] таблица из которой берутся значения.\n\n+ **field** — [name-параметр][3] поле в таблице `table:` из которого берется отображение.\n\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n\t+ Может передаваться только как [одно или список][14] [чисел][5].\n\t+ Параметр отсутствует, если таблица `table:` находится в [дереве][15].\n\t\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Выборка возможна только из [строчной части][13] таблицы.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям не выбирается ни одной строки, то результатом работы функции будет является [пустой список][17].\n\t\n+ **order** — [name-параметр][3] поле в таблице `table:`, по которому будет осуществляется сортировка.\n\n\t+ Множественный параметр — если указано несколько параметров `order:`, то сортировка будет осуществлена последовательно.\n\t+ Если параметр отсутсвует, то сортировка будет произведена в произвольном порядке.\n\t+ asc — по возрастанию\n\t+ desc — по убыванию\n\n\n+ **section** — [name-параметр][3], поле в таблице `table:`, по которому будут сгруппированы значения.\n\n\t+ [name-параметр][3]\n\t+ Поле указанное в `section:` должно содержать [одинарные значения][14].\n\t+ Если поле указанное в `section:` является [селектом][23], то автоматически будут использованы его отображения, а не основания.\n\t\n+ **preview** — [name-параметр][3] множественный параметр, поля данные которых выводятся в панельку по клику правой кнопки мыши или при выборе значения.\n\n+ **bfield** — [name-параметр][3] поля, выводящегося в параметр `\"value\"` итогового rowList.\n\n\t+ При пустом `bfield:` в качестве ключа используется `id`.\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n*klienty*\nid | pokupatel\n- | -\n1 | Alexey\n2 | Pavel\n3 | Boris\n\n```totum\nexample1: selectRowListForSelect(table: 'klienty'; field: 'pokupatel'; order: 'pokupatel' asc)\n\n\/\/Результат: \n\/\/[\n\/\/{\"value\": 1, \"is_del\": false, \"title\":\"Alexey\"},\n\/\/{\"value\": 3, \"is_del\": false, \"title\":\"Boris\"}\n\/\/{\"value\": 2, \"is_del\": false, \"title\":\"Pavel\"}\n\/\/]\n```\n**Пример 2**\n\n*cloud_kassir_sistemy_nalogooblojeniya*\nid | key | value\n- | - | -\n1 | 0 | Общая система налогообложения\n2 | 1 | Упрощенная система налогообложения (Доход)\n3 | 2 | Упрощенная система налогообложения (Доход минус Расход)\n4 | 3 | Единый налог на вмененный доход\n5 | 4 | Единый сельскохозяйственный налог\n6 | 5 | Патентная система налогообложения\n\n```totum\nexample2: selectRowListForSelect(table: 'cloud_kassir_sistemy_nalogooblojeniya'; field: 'value'; bfield: 'key';  where: 'key'<3; order: 'key' asc)\n\n\/\/ Результат: \n\/\/ [\n\/\/ {\"value\": 0, \"is_del\": false, \"title\":\"Общая система налогообложения\"},\n\/\/ {\"value\": 1, \"is_del\": false, \"title\":\"Упрощенная система налогообложения (Доход)\"}\n\/\/ {\"value\": 2, \"is_del\": false, \"title\":\"Упрощенная система налогообложения (Доход минус Расход)\"}\n\/\/ ]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_85_markdownfile.md","name":"func_selectRowListForSelect.md","size":5981}]},{"name":"selectRowListForTree","n":["table","field","parent"],"t":"(table: ''; cycle: ; field: ''; where: '' = ; order: '' asc; parent: ''; disabled: )","m":["where","order"],"kategoriya_funkcii":"1","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","order","parent","disabled","tfield"],"markdown_text":"### <a name=\"fn-selectRowListForTree\"><\/a>selectRowListForTree\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код селекта][4].\n```totum\n=: selectRowListForTree(table: ''; cycle: ; field: ''; order: '' asc; where: '' = ; parent: ''; disabled: )\n```\nВозвращает [список][14] [ассоциативных массивов][30] с row формата `{\"value\":35,\"is_del\":false,\"title\":\"Производство\",\"parent\":1}`\n\nИспользуется для подготовки данных поля [Селект-дерево][43].\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] таблица из которой берутся значения.\n\n+ **field** — [name-параметр][3] поле в таблице `table:`.\n\n+ **parent** — [name-параметр][3], поле содержащее значение id родительского элемента или null, если это элемент верхнего уровня.\n\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\t\n\t\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3], множественный, огранничение на выборку вида `'field_name' = \"value\"` аналогично selectList.\n\n+ **order** — [name-параметр][3], множественный, поле, по которому будет осуществляться сортировка, и порядок в виде `'field_name' asc` для сортировки по возрастанию и `'field_name' desc` для сортировки по убыванию.\n\n+ **disabled** — [числовой][5] [список][14], id, запрещенные к выбору, но отображаемые в дереве.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: selectRowListForTree(table: 'tree'; field: 'title'; parent: 'parent_id')\n\n\/\/ Результат: [{\"value\":35,\"is_del\":false,\"title\":\"Производство\",\"parent\":null},{\"value\":45,\"is_del\":true,\"title\":\"Закупка материалов и склад\",\"parent\":\"35\"} ]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_86_markdownfile.md","name":"func_selectRowListForTree.md","size":2387}]},{"name":"selectTreeChildren","n":["table","id","parent"],"t":"(table: ''; cycle: ; hash: ; id: ; parent: '')","m":[],"kategoriya_funkcii":"1","zapolnit_shablon":null,"p":["table","cycle","hash","parent","id"],"markdown_text":"### <a name=\"fn-selectTreeChildren\"><\/a>selectTreeChildren\n\nСложность: **<5>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: selectTreeChildren(table: ''; cycle: ; hash: ; id: ; parent: '')\n```\nВозвращает [список][14] из id, дочерних по отношению к указанному в параметре `id:`, а также дочерних к дочерним. Уровень вложенности не ограничен.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] таблица из которой берутся значения.\n\n+ **id** — [число][5], дочерние строки которого ищем.\n\n+ **parent** — [name-параметр][3] поля, содержащего id родителя (для элементов верхнего уровня `null`)\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], id цикла, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n\n**ПРИМЕРЫ**\n\n*tree*\nid | title | parent_id\n- | - | - \n1 | Системные таблицы | null\n2 | Основные | 1\n3 | Доступы | 1\n32 | Документация | null\n33 | Настройки | 32\n\n```totum\nexample: selectTreeChildren(table: 'tree'; id: 1; parent: 'parent_id')\n\n\/\/ Результат: [2, 3]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_26_markdownfile.md","name":"func_selectTreeChildren.md","size":1672}]},{"name":"selectRow","n":["table"],"t":"(table: ''; cycle: ; hash: ; fields: $list; field: ''; field: ''; where: '' = ; order: '' asc)","m":["where","order","field"],"kategoriya_funkcii":"1","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","order","tfield","sfield","fields","sfields"],"markdown_text":"### <a name=\"fn-selectRow\"><\/a>selectRow\n\nСложность: **<4>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: selectRow(table: ''; cycle: ; hash: ; fields: ; field: ''; field: ''; where: '' = ; order: '' asc)\n```\nВозвращает [ассоциативный массив][30] с основаниями в виде [name][18] полей указанных в  `field:` и отображениями в виде их значений из одной первой строки [строчной части][13] в соответсвии с условиями выборки `where:` и сортировкой `order:`.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] таблица из которой берутся значения.\n\n\n**Необязательные параметры**\n\n+ **field** — [name-параметр][3] поле в таблице `table:`.\n\n+ **cycle** — определяет цикл, если таблица `table:` является [расчетной в цикле][1].\t\n\t\n\t+ Может передаваться только как [одно или список][14] [чисел][5].\n\t+ Параметр отсутствует, если таблица `table:` находится в [дереве][15].\n\t\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Выборка row возможна только из [строчной части][13] таблицы.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям выбираются значения из нескольких строк, то результатом работы функции будет является [ассоциативный массив][30] из первой строки в соответсвии с сортировкой заданой в `order:`.\n\t+ Если по условиям не выбирается ни одной строки, то результатом работы функции будет является [пустой список][17].\n\n+ **order** — [name-параметр][3] поле в таблице `table:`, по которому будет осуществляется сортировка.\n\n\t+ Множественный параметр — если указано несколько параметров `order:`, то сортировка будет осуществлена последовательно.\n\t+ Если параметр отсутсвует, то сортировка будет произведена в произвольном порядке.\n\t+ asc — по возрастанию\n\t+ desc — по убыванию\n\n+ **sfield** — [name-параметр][3] поле типа [Селект][36] или [Селект-дерево][43], для которого нужно выбрать и вернуть отображаемое значение, а не основание.\n\n+ **tfield** — [name-параметр][3] поле, исползующееся для расчета значений селектов в запрошенных в `sfield:` полях.\n\n+ **fields** — [список][14] полей `field:`.\n\n+ **sfields** — [список][14] полей `sfield:`.\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n*klienty*\nid | pokupatel | summa\n- | - | - |\n1 | Alexey | 10 |\n2 | Pavel | 20 | \n3 | Boris | 30 |\n\n```totum\nexample: selectrow(table: 'klienty'; field: 'pokupatel'; field: 'summa'; order: 'id' desc)\n\n\/\/ Результат: {\"pokupatel\": \"Boris\", \"summa\": 30}\n```","d":false,"markdownfile":[{"ext":"md","file":"343_27_markdownfile.md","name":"func_selectRow.md","size":4877}]},{"name":"selectRowList","n":["table"],"t":"(table: ''; cycle: ; hash: ; fields: $list; field: ''; field: ''; where: '' = ; order: '' asc)","m":["where","order","field"],"kategoriya_funkcii":"1","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","order","tfield","sfield","fields","sfields"],"markdown_text":"### <a name=\"fn-selectRowList\"><\/a>selectRowList\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: selectRowList(table: ''; cycle: ; hash: ; fields: ; field: ''; field: ''; where: '' = ; order: '' asc)\n```\nВозвращает [список][14] [ассоциативных массивов][30].\n\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы из которой берутся данные.\n\n\n**Необязательные параметры**\n\n+ **field** — [name-параметр][3] поле в таблице `table:`.\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3], множественный, огранничение на выборку вида `'field_name' = \"value\"`.\n\n+ **order** — [name-параметр][3], множественный, поле, по которому будет осуществляться сортировка, и порядок в виде `'field_name' asc` для сортировки по возрастанию и `'field_name' desc` для сортировки по убыванию.\n\n+ **tfield** — [name-параметр][3] поле, исползующееся для расчета значений селектов в запрошенных в `sfield:` полях.\n\n+ **sfield** — [name-параметр][3] поле типа [Селект][36] или [Селект-дерево][43], для которого нужно выбрать и вернуть отображаемое значение, а не основание.\n\n+ **fields** — [список][14] полей `field:`.\n\n+ **sfields** — [список][14] полей `sfield:`.\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n*klienty*\nid | pokupatel | summa\n- | - | - |\n1 | Alexey | 10 |\n2 | Pavel | 20 | \n3 | Boris | 30 |\n\n```totum\nexample: selectrowlist(table: 'klienty'; field: 'pokupatel'; field: 'summa'; where: 'id' > 1; order: 'id' desc)\n\n\/\/ Результат: \n\/\/ [\n\/\/ {\"pokupatel\": \"Boris\", \"summa\": 30},\n\/\/ {\"pokupatel\": \"Pavel\", \"summa\": 20},\n\/\/ ]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_28_markdownfile.md","name":"func_selectRowList.md","size":2528}]},{"name":"nowUser","n":[],"t":"()","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":[],"markdown_text":"","d":true,"markdownfile":null},{"name":"nowRoles","n":[],"t":"()","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":[],"markdown_text":"","d":true,"markdownfile":null},{"name":"nowCycleId","n":[],"t":"()","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":[],"markdown_text":"","d":true,"markdownfile":null},{"name":"nowField","n":[],"t":"()","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":[],"markdown_text":"","d":true,"markdownfile":null},{"name":"nowTableUpdateDt","n":[],"t":"()","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":[],"markdown_text":"","d":true,"markdownfile":null},{"name":"nowTableName","n":[],"t":"()","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":[],"markdown_text":"","d":true,"markdownfile":null},{"name":"nowTableId","n":[],"t":"()","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":[],"markdown_text":"","d":true,"markdownfile":null},{"name":"nowDate","n":[],"t":"(format: \"Y-m-d H:i\")","m":[],"kategoriya_funkcii":"3","zapolnit_shablon":null,"p":["format"],"markdown_text":"### <a name=\"fn-nowDate\"><\/a>nowDate\n\nСложность: **<1>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: nowDate(format: \"Y-m-d H:i\")\n```\nВозвращает текущую дату в указанном формате.\n\n\n**Необязательные параметры**\n\n+ **format** — определяет формат в котором выводится дата, например `Y-m-d H:i`\n\n\t+ Если параметр `format:` отсутствует, то результатом будет [строка][6] формата `Y-m-d H:i`. \n\t+ ВНИМАНИЕ! ПОЛЕ ДАТА ХРАНИТ ЗНАЧЕНИЕ В ФОРМАТЕ `Y-m-d H:i` и `Y-m-d`. ДЛЯ КОРРЕКТНОЙ РАБОТЫ СРАВНЕНИЙ ОБЕ ЧАСТИ НЕРАВЕНСТВА ДОЛЖНЫ БЫТЬ В АНАЛОГИЧНОМ ФОМАТЕ!\n\t+ Может быть указан как [одна][14] [строка][6] в которой в результате работы функции будут произведены замены:\n\n\t+ **Символы формата даты**\n\t\t+ `d` — День месяца, 2 цифры с ведущим нулём от 01 до 31\n\t\t+ `D` — Текстовое представление дня недели, 3 символа от Mon до Sun (не рекомендуется использовать тк для этого есть функция `dateWeekDay`)\n\t\t+ `j`— День месяца без ведущего нуля от 1 до 31\n\t\t+ `N` — Порядковый номер дня недели от 1 (понедельник) до 7 (воскресенье)\n\t\t+ `z` – Порядковый номер дня в году от 0 до 365\n\t\t+ `W` — Порядковый номер недели года.\n\t\t+ `m` — Порядковый номер месяца с ведущим нулём от 01 до 12\n\t\t+ `M` — Сокращенное наименование месяца, 3 символа от Jan до Dec (не рекомендуется использовать тк для этого есть функция Х)\n\t\t+ `n` — Порядковый номер месяца без ведущего нуля от 1 до 12\n\t\t+ `t` — Количество дней в указанном месяце от 28 до 31\n\t\t+ `L` — Признак високосного года 1, если год високосный, иначе 0.\n\t\t+ `Y` — Порядковый номер года, 4 цифры. Примеры: 1999, 2003\n\t\t+ `y` — Номер года, 2 цифры. Примеры: 99, 03\n\t\t+ `H` — Часы в 24-часовом формате с ведущим нулём от 00 до 23\n\t\t+ `i` — Минуты с ведущим нулём от 00 до 59\n\t\t+ `s` — Секунды с ведущим нулём от 00 до 59\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample1: nowdate()\n\n\/\/ Результат: \"2018-01-15 20:48\" \n```\n\n**Пример 2**\n\n```totum\nexample2: nowdate(format: \"Y-m-d\")\n\n\/\/ Результат: \"2018-01-15\" \n```\n\n**Пример 3**\n\n```totum\nexample3: nowdate(format: \"H:i\")\n\n\/\/ Результат: \"20:48\" \n```\n\n**Пример 4**\n\n```totum\nexample4: nowdate(format: \"d.m.Y\")\n\n\/\/ Результат: \"15.01.2018\" \n```\n\n**Пример 5**\n\n```totum\nexample5: nowdate(format: \"d.m.Y (H:00)\")\n\n\/\/ Результат: \"15.01.2018 (20:00)\" \n```\n\n**Пример 6**\n\n```totum\nexample6: nowdate(format: \"z\")\n\n\/\/ Результат: \"15\"\n\/\/ Несмотря на то, что результатом работы этой функции всегда является строка, ее можно использовать как Число, если она содержит в себе только число или число и точку.\n```","d":false,"markdownfile":[{"ext":"md","file":"343_29_markdownfile.md","name":"func_nowDate.md","size":3918}]},{"name":"dateDiff","n":["date","unit"],"t":"(date: ; date: ; unit: \"day|year|month|hour|minute\")","m":["date"],"kategoriya_funkcii":"3","zapolnit_shablon":null,"p":["date","unit"],"markdown_text":"### <a name=\"fn-dateDiff\"><\/a>dateDiff\n\nСложность: **<2>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: dateDiff(date: ; date: ; unit: \"day|year|month|hour|minute\")\n```\nВозвращает число, равное разнице между `date` и `date` выраженное в единице `unit`. Если правая дата раньше левой — функция вернет отрицательное значение. Разница между датами возвращается в виде дробного значения.\n\n\n**Обязательные параметры**\n\n+ **date** — обязательно должно быть указано два параметра.\n\t+ Могут быть переданы как [одна][14] [строка][6].\n\t+ Передаваемые значения должны соответствовать одному из форматов:\n\t\t+ `Y-m-d H:i`\n\t\t+ `Y-m-d`\n\t\t+ `d-m-Y H:i`\n\t\t+ `d-m-Y`\n\t\t+ `d-m-y H:i`\n\t\t+ `d-m-y`\n\t+ Если один из параметров указан с `H:i`, а другой без — то для сравнения параметру с отсутсвующим `H:i` присваивается 00:00\n\n+ **unit** — параметр, определяющий, в какой величине отображается разница.\n\t+ Передается как [одна][14] [строка][6] и может принимать одно из значений:\n\t\t+ `year` — года\n\t\t+ `month` — месяцы\n\t\t+ `day` — дни\n\t\t+ `hour` — часы\n\t\t+ `minute` — минуты\n\t+ Параметр может отсутствовать, в этом случае его значению присваивается `day`.\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample: dateDiff(date: $date1; date: $date2; unit: \"day\")\n\tdate1: \"01.07.2017\"\n\tdate2: \"2017-07-02 10:42\"\n\t\n\/\/ Результат: \"1.4458333333333\"\n```","d":false,"markdownfile":[{"ext":"md","file":"343_58_markdownfile.md","name":"func_dateDiff.md","size":2119}]},{"name":"selectListAssoc","n":["table","field"],"t":"(table: ''; cycle: ; bfield: 'id'; field: ''; order: '' asc; where:  '' = ; section: '';  preview: ''; parent: ''; disabled: )","m":["where","order","preview"],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":["table","field","cycle","hash","where","order","tfield","sfield","section","preview","parent","disabled","bfield"],"markdown_text":"","d":true,"markdownfile":null},{"name":"dateAdd","n":["date"],"t":"(date: ; days: ; hours: ; minutes: ; months: ; years: ; format: \"Y-m-d H:i\")","m":[],"kategoriya_funkcii":"3","zapolnit_shablon":null,"p":["format","date","days","hours","minutes","months","years"],"markdown_text":"### <a name=\"fn-dateAdd\"><\/a>dateAdd\n\nСложность: **<2>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: dateAdd(date: ; days: ; hours: ; minutes: ; months: ; years: ; format: \"Y-m-d H:i\")\n```\nПрибавляет к дате дни, часы и минуты и возвращает новую дату (позже заданной) в виде [одной][14] [строки][6]. Указание дней, часов и минут с отрицательным знаком приведет к вычитанию их из стартовой даты. Будет возвращена дата раньше стартовой.\n\n>> Если при добавлении месяцев получается отсутсвующая дата, то избыток дней переносится на следующий месяц.\n\n**Обязательные параметры**\n\n+ **date** — дата к которой будет прибавлятся значение.\n\t+ Передается как как [одна][14] [строка][6].\n\t+ Передаваемое значение должно соответствовать одному из форматов:\n\t\t+ `Y-m-d H:i`\n\t\t+ `Y-m-d`\n\t\t+ `d-m-Y H:i`\n\t\t+ `d-m-Y`\n\t\t+ `d-m-y H:i`\n\t\t+ `d-m-y`\n\t\t\n\t+ Если передана без `H:i`, а прибавляются часы и минуты, то присваивается 00:00\n\n\n**Необязательные параметры**\n\n+ **format** — определяет формат в котором выводится дата, например `\"Y-m-d H:i\"`\n\n\t+ Если параметр ***format*** отсутствует, то результатом будет [строка][6] формата \"Y-m-d H:i\". \n\t+ ВНИМАНИЕ! ПОЛЕ ДАТА ХРАНИТ ЗНАЧЕНИЕ В ФОРМАТЕ \"Y-m-d H:i\" и \"Y-m-d\". ДЛЯ КОРРЕКТНОЙ РАБОТЫ СРАВНЕНИЙ ОБЕ ЧАСТИ НЕРАВЕНСТВА ДОЛЖНЫ БЫТЬ В АНАЛОГИЧНОМ ФОМАТЕ!\n\t+ Может быть указан как [одна][14] [строка][6] в которой в результате работы функции будут произведены замены:\n\n\t+ **Символы формата даты**\n\t\t+ `d` — День месяца, 2 цифры с ведущим нулём от 01 до 31\n\t\t+ `D` — Текстовое представление дня недели, 3 символа от Mon до Sun (не рекомендуется использовать тк для этого есть функция `dateWeekDay`)\n\t\t+ `j`— День месяца без ведущего нуля от 1 до 31\n\t\t+ `N` — Порядковый номер дня недели от 1 (понедельник) до 7 (воскресенье)\n\t\t+ `z` – Порядковый номер дня в году от 0 до 365\n\t\t+ `W` — Порядковый номер недели года.\n\t\t+ `m` — Порядковый номер месяца с ведущим нулём от 01 до 12\n\t\t+ `M` — Сокращенное наименование месяца, 3 символа от Jan до Dec (не рекомендуется использовать тк для этого есть функция Х)\n\t\t+ `n` — Порядковый номер месяца без ведущего нуля от 1 до 12\n\t\t+ `t` — Количество дней в указанном месяце от 28 до 31\n\t\t+ `L` — Признак високосного года 1, если год високосный, иначе 0.\n\t\t+ `Y` — Порядковый номер года, 4 цифры. Примеры: 1999, 2003\n\t\t+ `y` — Номер года, 2 цифры. Примеры: 99, 03\n\t\t+ `H` — Часы в 24-часовом формате с ведущим нулём от 00 до 23\n\t\t+ `i` — Минуты с ведущим нулём от 00 до 59\n\t\t+ `s` — Секунды с ведущим нулём от 00 до 59\n\n+ **days** — [одно][14] целое [число][5], количество дней.\n\n+ **hours** — [одно][14] целое [число][5], количество часов.\n\n+ **minutes** — [одно][14] целое [число][5], количество минут.\n\n+ **months** — [одно][14] целое [число][5], количество месяцев.\n\n+ **years** — [одно][14] целое [число][5], количество лет.\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample: dateAdd(date: \"2017-10-01 10:00\"; days: 1; hours: 2; minutes: 20)\n\n\/\/ Результат: \"2017-10-02 12:20\"\n```","d":false,"markdownfile":[{"ext":"md","file":"343_30_markdownfile.md","name":"func_dateAdd.md","size":4780}]},{"name":"dateFormat","n":["format","date"],"t":"(date: ; format: \"d.m.Y H:i\")","m":[],"kategoriya_funkcii":"3","zapolnit_shablon":null,"p":["date","format"],"markdown_text":"### <a name=\"fn-dateFormat\"><\/a>dateFormat\n\nСложность: **<2>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: dateFormat(date: ; format: \"d.m.Y H:i\")\n```\nВозвращает преобразованную дату как [одну][14] [строку][6].\n\n\n**Обязательные параметры**\n\n+ **date** — преобразуемая дата.\n\t+ Передается как как [одна][14] [строка][6].\n\t+ Передаваемое значение должно соответствовать одному из форматов:\n\t\t+ `Y-m-d H:i`\n\t\t+ `Y-m-d`\n\t\t+ `d-m-Y H:i`\n\t\t+ `d-m-Y`\n\t\t+ `d-m-y H:i`\n\t\t+ `d-m-y`\n\t\t\n\t+ Если передана без `H:i`, а преобразуется в формат с `H:i` — присваивается 00:00\n\t\n+ **format** — определяет формат в котором выводится дата, например `\"Y-m-d H:i\"`\n\n\t+ Если параметр `format:` отсутствует, то результатом будет [строка][6] формата \"Y-m-d H:i\". \n\t+ ВНИМАНИЕ! ПОЛЕ ДАТА ХРАНИТ ЗНАЧЕНИЕ В ФОРМАТЕ `Y-m-d H:i` и `Y-m-d`. ДЛЯ КОРРЕКТНОЙ РАБОТЫ СРАВНЕНИЙ ОБЕ ЧАСТИ НЕРАВЕНСТВА ДОЛЖНЫ БЫТЬ В АНАЛОГИЧНОМ ФОМАТЕ!\n\t+ Может быть указан как [одна][14] [строка][6] в которой в результате работы функции будут произведены замены:\n\n\t+ **Символы формата даты**\n\t\t+ `d` — День месяца, 2 цифры с ведущим нулём от 01 до 31\n\t\t+ `D` — Текстовое представление дня недели, 3 символа от Mon до Sun (не рекомендуется использовать тк для этого есть функция `dateWeekDay`)\n\t\t+ `j`— День месяца без ведущего нуля от 1 до 31\n\t\t+ `N` — Порядковый номер дня недели от 1 (понедельник) до 7 (воскресенье)\n\t\t+ `z` – Порядковый номер дня в году от 0 до 365\n\t\t+ `W` — Порядковый номер недели года.\n\t\t+ `m` — Порядковый номер месяца с ведущим нулём от 01 до 12\n\t\t+ `M` — Сокращенное наименование месяца, 3 символа от Jan до Dec (не рекомендуется использовать тк для этого есть функция Х)\n\t\t+ `n` — Порядковый номер месяца без ведущего нуля от 1 до 12\n\t\t+ `t` — Количество дней в указанном месяце от 28 до 31\n\t\t+ `L` — Признак високосного года 1, если год високосный, иначе 0.\n\t\t+ `Y` — Порядковый номер года, 4 цифры. Примеры: 1999, 2003\n\t\t+ `y` — Номер года, 2 цифры. Примеры: 99, 03\n\t\t+ `H` — Часы в 24-часовом формате с ведущим нулём от 00 до 23\n\t\t+ `i` — Минуты с ведущим нулём от 00 до 59\n\t\t+ `s` — Секунды с ведущим нулём от 00 до 59\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample: dateFormat(date: \"01.07.2017\"; format: \"d.m\")\n\n\/\/ Результат: \"01.07\"\n```","d":false,"markdownfile":[{"ext":"md","file":"343_56_markdownfile.md","name":"func_dateFormat.md","size":3614}]},{"name":"dateWeekDay","n":["format","date"],"t":"(date: ; format: \"number|short|full\")","m":[],"kategoriya_funkcii":"3","zapolnit_shablon":null,"p":["date","format"],"markdown_text":"### <a name=\"fn-dateWeekDay\"><\/a>dateWeekDay\n\nСложность: **<1>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: dateWeekDay(date: ; format: \"number|short|full\")\n```\nВозвращает кириллический день недели в виде [одной][14] [строки][6].\n\n\n**Обязательные параметры**\n\n+ **date** — дата по которой будет браться значение дня недели.\n\t+ Передается как как [одна][14] [строка][6].\n\t+ Передаваемое значение должно соответствовать одному из форматов:\n\t\t+ `Y-m-d H:i`\n\t\t+ `Y-m-d`\n\t\t+ `d-m-Y H:i`\n\t\t+ `d-m-Y`\n\t\t+ `d-m-y H:i`\n\t\t+ `d-m-y`\n\n+ **format** — [одна][14] [строка][6], определяет формат в котором выводится день недели.\n\n\t+ Может быть указан как:\n\t\t+ `number` — число, порядковый номер дня в неделе от 1.\n\t\t+ `short` — короткая запись `пн`, `вт`, `ср`, `чт`, `пт`, `сб`, `вс`.\n\t\t+ `full`— полная запись `понедельник`, `вторник`...\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: dateWeekDay(date: $#nd; format: \"full\")\n\n\/\/ Результат: \"четверг\"\n```","d":false,"markdownfile":[{"ext":"md","file":"343_55_markdownfile.md","name":"func_dateWeekDay.md","size":1495}]},{"name":"round","n":["num"],"t":"(num: ; type: \"up|down|math\"; step: 0.5; dectimal: 1)","m":[],"kategoriya_funkcii":"13","zapolnit_shablon":null,"p":["num","type","step","dectimal"],"markdown_text":"### <a name=\"fn-round\"><\/a>round\n\nСложность: **<1>**\n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n\n```totum\n=: round(num: ; type: ; step: ; dectimal: )\n```\nОкругляет число в нужную сторону с заданным шагом до указанного количества знаков после запятой.\n\nВозвращает [одно][14] [число][5]\n\n\n**Обязательный параметр**\n\n+ **num** — [одно][14] [число][5] для округления.\n\n\n**Необязательные параметры**\n\n+ **type** — [одна][14] [строка][6], направление округления.\n\n\t+ `up` — округление вверх\n\t+ `down` — округление вниз\n\t+ При отсутствии — математически\n\n+ **step** — [одно][14] [число][6], шаг округления.\n\n+ **dectimal** — [одно][14] целое [число][6], количество знаков после запятой у результата работы функции.\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample: round(num: $limit; type: \"up\"; step: 0.25; dectimal: 2)\n\tlimit: 3.56\n\n\/\/ Результат: 3.75\n```","d":false,"markdownfile":[{"ext":"md","file":"343_12_markdownfile.md","name":"func_round.md","size":1390}]},{"name":"modul","n":["num"],"t":"(num: )","m":[],"kategoriya_funkcii":"13","zapolnit_shablon":null,"p":["num"],"markdown_text":"### <a name=\"fn-modul\"><\/a>modul\n\nСложность: **<1>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: modul(num: )\n```\nВозвращает [одно][14] [число][5], абсолютное значение (модуль) числа, переданного в `num:`.\n\n\n**Обязательные параметры**\n\n+ **num** — [одно][14] [число][5].\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: modul(num: -3)\n\n\/\/ Результат: 3\n```","d":false,"markdownfile":[{"ext":"md","file":"343_91_markdownfile.md","name":"func_modul.md","size":627}]},{"name":"numRand","n":[],"t":"(min: ; max: )","m":[],"kategoriya_funkcii":"13","zapolnit_shablon":null,"p":["min","max"],"markdown_text":"### <a name=\"fn-numRand\"><\/a>numRand\n\nСложность: **<1>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: numRand(min: ; max: )\n```\nВозвращает [одно][14] [число][5] псевдослучайное значение в диапазоне от `min:` (или 0) до `max:` (или максимально возможного в вашей версии PHP случайного числа).\n\n\n**Необязательные параметры**\n\n+ **min** — [одно][14] [число][5], минимальная граница диапазона для случайного числа.\n\t\n\t+ При отсутсвии 0\n\t\n+ **max** — [одно][14] [число][5], максимальная граница диапазона для случайного чсла.\n\n\t+ При отсутствии максимальное для платформы.\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: numRand(min: 0; max: 20)\n\n\/\/ Результат: 4\n```","d":false,"markdownfile":[{"ext":"md","file":"343_111_markdownfile.md","name":"func_numRand.md","size":1135}]},{"name":"strAdd","n":["str"],"t":"(str: ; str: )","m":["str"],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["str"],"markdown_text":"### <a name=\"fn-strAdd\"><\/a>strAdd\n\nСложность: **<1>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strAdd(str: ; str: )\n```\nВозвращает [строку][6], из последовательно соединенных указанных строк.\n\n\n**Обязательные параметры**\n\n+ **str** — [одна][14] [строка][6] или [число][5], множественный параметр, определяющий части соединяемых строк.\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample: strAdd(str: \"Приятного использования \"; str: \"TOTUM\")\n\n\/\/ Результат: \"Приятного использования TOTUM\"\n```","d":false,"markdownfile":[{"ext":"md","file":"343_33_markdownfile.md","name":"func_strAdd.md","size":889}]},{"name":"strReplace","n":["str","from","to"],"t":"(str: ; from: ; to: )","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["str","from","to"],"markdown_text":"### <a name=\"fn-strReplace\"><\/a>strReplace\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strReplace(str: ; from: ; to: )\n```\nИщет в `str:` все прямые вхождения `from:` и заменяет их на `to:`. Возвращает [одну][14] [строку][6].\n\n\n**Обязательные параметры**\n\n+ **str** — [одна][14] [строка][6] или [число][5] в которой будут производится замены.\n\n+ **from** — [список или одна][14] [строка][6], соответствие которое будет заменятся.\n\t\n\t+ Будут заменены все найденные вхождения.\n\t+ Если передается как [список][14], то последовательно будут осуществлены замены всех элементов списка.\n\n+ **to** — [список или одна][14] [строка][6] на которую будет произведена замена.\n\t\n\t+ Если `str:` передается как [список][14], то `to` тоже может быть передан как [список][14], тогда замены будут произведены в соответствии с совпадениями элементов списков.\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample1: strreplace(str: \"Двигатели R3 и R5 в режиме зажигания\"; from: \"3\"; to: \"4\")\n\n\/\/ Результат: \"Двигатели R4 и R5 в режиме зажигания\"\n```\n\n**Пример 2**\n\n```totum\nexample2: strreplace(str: \"Двигатели R3 и R5 в режиме зажигания\"; from: \"R\"; to: \"M\")\n\n\/\/ Результат: \"Двигатели M3 и M5 в режиме зажигания\"\n```\n\n**Пример 3**\n\n```totum\nexample3: strreplace(str: \"Двигатели R3 и M5 в режиме зажигания\"; from: $feng; to: $teng)\n\tfeng: listcreate(item: \"R3\"; item: \"M5\")\n\tteng: listcreate(item: \"S2\"; item: \"T7\")\n\n\/\/ Результат: \"Двигатели S2 и T7 в режиме зажигания\"\n```","d":false,"markdownfile":[{"ext":"md","file":"343_66_markdownfile.md","name":"func_strReplace.md","size":2324}]},{"name":"strRegMatches","n":["str","template"],"t":"(str: ; template: ; matches: \"matches\"; flags: \"u\")","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["str","template","matches","flags"],"markdown_text":"### <a name=\"fn-strRegMatches\"><\/a>strRegMatches\n\nСложность: **<4>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strRegMatches(str: ; template: ; matches: \"matches\"; flags: \"u\")\n```\nВозвращает `true` или `false` — совпадение с шаблоном.\n\n\n**Обязательные параметры**\n\n+ **str** — [одна][14] [строка][6] или [число][5] строка\/текст для анализа.\n\n+ **template** — [одна][14] [строка][6] шаблон PCRE (perl-совместимых регулярных выражений).\n\n\n\n**Необязательные параметры**\n\n+ **matches** — [одна][14] [строка][6] наименование переменной, которой будут присвоены найденные совпадения\n\n\t+ В переменную будет передан [список][14].\n\t+ С нулевым индексом в списке будет полное совпадение с шаблоном.\n\t+ С последующими — совпадение со выражениями, взятыми в скобки.\n\t\n+ **flags** — (PCRE-флаги)[https:\/\/www.php.net\/manual\/ru\/reference.pcre.pattern.modifiers.php]. По-умолчанию, передается `u- utf-8` режим.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: if(condition: $reg = true; then: $#matches; else: \"Совпадение не найдено\")\nreg: strRegMatches(str: \"Сашина машина шуршит шинами\"; template: \"\\s+(шина[^\\s]*)\"; matches: \"matches\"; flags: \"u\")\n\n\/\/ Результат: [\" шинами\",\"шинами\"]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_101_markdownfile.md","name":"func_strRegMatches.md","size":1824}]},{"name":"strRegAllMatches","n":["str","template"],"t":"(str: ; template: ; matches: \"matches\"; flags: \"u\")","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["str","template","matches","flags"],"markdown_text":"### <a name=\"fn-strRegAllMatches\"><\/a>strRegAllMatches\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strRegAllMatches(str: ; template: ; matches: \"matches\"; flags: \"u\")\n```\nВозвращает true или false - в str есть одно или больше совпадение с шаблоном\n\n\n**Обязательные параметры**\n\n+ **str** — [одна][14] [строка][6] или [число][5] строка\/текст для анализа.\n\n+ **template** — [одна][14] [строка][6] шаблон PCRE (perl-совместимых регулярных выражений).\n\n\n\n**Необязательные параметры**\n\n+ **matches** — [одна][14] [строка][6] наименование переменной, которой будут присвоены найденные совпадения\n\n\t+ В переменную будет передан [список][14] [списков][14].\n\t+ В лист с индексом 0 будут переданы полные совпадения с шаблоном\n\t+ В последующие — совпадения со выражениями, взятыми в скобки.\n\t\n+ **flags** — (PCRE-флаги)[https:\/\/www.php.net\/manual\/ru\/reference.pcre.pattern.modifiers.php]. По-умолчанию, передается `u- utf-8` режим.\n\n\n\n\n**ПРИМЕРЫ**\n*Разбить текст на строки и найти первое слово в каждой строке*\n\n\n*str*\nLorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diem \nnonummy nibh euismod tincidunt ut lacreet dolore magna aliguam erat volutpat. \nUt wisis enim ad minim veniam, quis nostrud exerci tution ullamcorper suscipit \nlobortis nisl ut aliquip ex ea commodo consequat.\n\n```totum\nexample: if(condition: $reg=true; then: $#matches; else: \"Совпадение не найдено\")\n\treg: strRegAllMatches(str: #str; template: \"\\s*([^\\n ]+)[^\\n]+(?:\\n|$)\"; matches: \"matches\"; flags: \"mu\")\n\n\/\/  Результат: [\n\/\/  [\n\/\/    \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diem \\n\",\n\/\/    \"  nonummy nibh euismod tincidunt ut lacreet dolore magna aliguam erat volutpat. \\n\",\n\/\/    \"  Ut wisis enim ad minim veniam, quis nostrud exerci tution ullamcorper suscipit \\n\",\n\/\/    \"  lobortis nisl ut aliquip ex ea commodo consequat.\"\n\/\/  ],\n\/\/  [\n\/\/    \"Lorem\",\n\/\/    \"nonummy\",\n\/\/    \"Ut\",\n\/\/    \"lobortis\"\n\/\/  ]\n\/\/  ]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_105_markdownfile.md","name":"func_strRegAllMatches.md","size":2635}]},{"name":"strRandom","n":["length"],"t":"(length: 5; numbers: \"true|false|12345\"; letters: \"false|true|abcdABCD\"; symbols: \"false|true|!@#$%^&\")","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["length","numbers","letters","symbols"],"markdown_text":"### <a name=\"fn-strRandom\"><\/a>strRandom\n\nСложность: **<1>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strRandom(length: 5; numbers: \"true|false|12345\"; letters: \"false|true|abcdABCD\"; symbols: \"false|true|!@#$%^&\")\n```\nВозвращает [строку][6] длинной `length`, составленную из перечисленных символов.\n\n\n**Обязательные параметры**\n\n+ **length** — [число][5], длина результирующей строки.\n\n\n\n**Необязательные параметры**\n\n+ **numbers** — [одна][14] [строка][6], описыващая использование чисел.\n\n\t+ `false` - не использовать числа.\n\t+ `true` - использовать все числа.\n\t+ `12345` - использовать только числа 12345.\n\t\n+ **letters** — [одна][14] [строка][6], описывающая использование букв.\n\n\t+ `false` — не использовать буквы.\n\t+ `true` — использовать все буквы английского алфавита.\n\t+ `abcdABCD` — использовать только указанные буквы.\n\t\n+ **symbols** — [одна][14] [строка][6], описывающая использование символов.\n\n\t+ `false` — не использовать символы.\n\t+ `true` — использовать символы !@#$%^&*()_+=-%,.;:\n\t+ `!@#$%^&` — использовать только указанные символы.\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: strRandom(length: 5; numbers: \"true\"; letters: \"true\"; symbols: \"true\")\n\n\/\/ Результат: \"z4yF9\"\n```","d":false,"markdownfile":[{"ext":"md","file":"343_79_markdownfile.md","name":"func_strRandom.md","size":1881}]},{"name":"strBaseEncode","n":["str"],"t":"(str: )","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["str"],"markdown_text":"### <a name=\"fn-strBaseEncode\"><\/a>strBaseEncode\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strBaseEncode(str: )\n```\nВозвращает [строку][6] кодированную в base64.\n\n\n**Обязательные параметры**\n\n+ **str** — [одна][14] [строка][6] или [число][5] для кодирования.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: strBaseEncode(str: \"строка для кодирования\")\n\n\/\/ Результат: 0YHRgtGA0L7QutCwINC00LvRjyDQutC+0LTQuNGA0L7QstCw0L3QuNGP\n```","d":false,"markdownfile":[{"ext":"md","file":"343_83_markdownfile.md","name":"func_strBaseEncode.md","size":735}]},{"name":"strBaseDecode","n":["str"],"t":"(str: )","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["str"],"markdown_text":"### <a name=\"fn-strBaseDecode\"><\/a>strBaseDecode\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strBaseDecode(str: )\n```\nВозвращает раскодированную base64 [строку][6] или `false`.\n\n>>Внимание! В результате раскодирования может быть получена строка с не `utf-8` символами, которая не сможет быть сохранена как значение поля и при такой попытке будет отдана ошибка базы данных!\n\n**Обязательные параметры**\n\n+ **str** — [одна][14] [строка][6] или [число][5] в base64 для декодирования.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: strBaseDecode(str: \"0YHRgtGA0L7QutCwINC00LvRjyDQutC+0LTQuNGA0L7QstCw0L3QuNGP\")\n\n\/\/ Результат: строка для кодирования\n```","d":false,"markdownfile":[{"ext":"md","file":"343_84_markdownfile.md","name":"func_strBaseDecode.md","size":1116}]},{"name":"strLength","n":["str"],"t":"(str: )","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["str"],"markdown_text":"### <a name=\"fn-strLength\"><\/a>strLength\n\nСложность: **<1>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strLength(str: )\n```\nВозвращает [число][5] — длину `str`\n\n\n**Обязательные параметры**\n\n+ **str** — [одна][14] [строка][6] или [число][5] для определения длины.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: strLength(str: \"Тотум\")\n\n\/\/ Результат: 5\n```","d":false,"markdownfile":[{"ext":"md","file":"343_90_markdownfile.md","name":"func_strLength.md","size":626}]},{"name":"strRepeat","n":["num","str"],"t":"(str: ; num: )","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["str","num"],"markdown_text":"### <a name=\"fn-strRepeat\"><\/a>strRepeat\n\nСложность: **<1>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strRepeat(str: ; num: )\n```\nВозвращает [строку][6] из `str:`, повторенного `num:` раз.\n\n\n**Обязательные параметры**\n\n+ **num** — [одно][14] [число][5], количество раз поврторения.\n\n+ **str** — [одна][14] [строка][6] или [число][5] для повторения.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: strRepeat(str: \"-\"; num: 5)\n\n\/\/ Результат: \"-----\"\n```","d":false,"markdownfile":[{"ext":"md","file":"343_89_markdownfile.md","name":"func_strRepeat.md","size":758}]},{"name":"strSplit","n":["str"],"t":"(str: ; separator: )","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["str","separator","limit"],"markdown_text":"### <a name=\"fn-strSplit\"><\/a>strSplit\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strSplit(str: ; separator: )\n```\nВозвращает список из строк — `str:` разбитое по `separator:`\n\n\n**Обязательные параметры**\n\n+ **str** — [одна][14] [строка][6] или [число][5] строка или текст из которых будет формироваться [список][14].\n\n\n\n**Необязательные параметры**\n\n+ **separator** — [одна][14] [строка][6], разделитель.\n\n+ **limit** — максимальное [число][5] элементов в возвращаемом списке.\n\n\n**ПРИМЕРЫ**\n\n*str*\nLorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diem \nnonummy nibh euismod tincidunt ut lacreet dolore magna aliguam erat volutpat. \nUt wisis enim ad minim veniam, quis nostrud exerci tution ullamcorper suscipit \nlobortis nisl ut aliquip ex ea commodo consequat.\n  \n\n```totum\nexample: strSplit(str: #str; separator: $#nl)\n\n\/\/ Результат: \n\/\/\t[\n\/\/  \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diem \",\n\/\/  \"  nonummy nibh euismod tincidunt ut lacreet dolore magna aliguam erat volutpat. \",\n\/\/  \"  Ut wisis enim ad minim veniam, quis nostrud exerci tution ullamcorper suscipit \",\n\/\/  \"  lobortis nisl ut aliquip ex ea commodo consequat.\"\n\/\/  ]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_109_markdownfile.md","name":"func_strSplit.md","size":1608}]},{"name":"strTransform","n":["str","to"],"t":"(str: ; to: \"upper|lower|capitalize\")","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["str","to"],"markdown_text":"### <a name=\"fn-strTransform\"><\/a>strTransform\n\nСложность: **<2>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strTransform(str: ; to: \"upper|lower|capitalize\")\n```\nВозвращает измененную [строку][6].\n\n\n**Обязательные параметры**\n\n+ **str** — [строку][6] для изменения.\n\n+ **to** — [строку][6], одно из трех значений.\n\n\t+ `upper` — сделать все буквы заглавными.\n\t+ `lower` — сделать все буквы строчными.\n\t+ `capitalize` — сделать каждую первую букву слова заглавной.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: strTransform(str: \"вася пупкин\"; to: \"capitalize\")\n\n\/\/ Результат: Вася Пупкин\n```","d":false,"markdownfile":[{"ext":"md","file":"343_113_markdownfile.md","name":"func_strTransform.md","size":983}]},{"name":"textByTemplate","n":["data","template"],"t":"(template: \"\"; data: $data)","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["data","template"],"markdown_text":"### <a name=\"fn-textByTemplate\"><\/a>textByTemplate\n\nСложность: **<5>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: textByTemplate(template: \"\"; data: $data)\n```\nВозвращает `html`.\n\n\n**Обязательные параметры**\n\n+ **data** — [ассоциативных массивов][30] с данными для заполнения шаблона.\n\n+ **template** — [одна][14] [строка][6], name шаблона в таблице Шаблоны печати.\n\n\n\n**ПРИМЕРЫ**\n\nid |\tName шаблона |\ttype |\tstyles |\thtml\n-  |          -      |    -  |    -    |   -\n28 |\tkp |\tСтраница |\t.title{font-size: 20px;}.text-main{font-size: 14px}.text-footer{padding-top: 20px; font-size: 14px}\t| &lt;div class=&quot;title&quot;&gt;  {title}&lt;\/div&gt;&lt;div class=&quot;text-main&quot;&gt;  {text}&lt;\/div&gt;&lt;div class=&quot;text-footer&quot;&gt;  {footer}&lt;\/div&gt;\n\n```totum\nexample: textByTemplate(template: \"kp\"; data: $data)\n\tdata: rowCreate(field: \"title\" = \"Заголовок\"; field: \"text\" = \"Текст\"; field: \"footer\" = \"Футер\")\n\t\n\/\/ Результат: \"<style>.title{font-size: 20px;}.text-main{font-size: 14px}.text-footer{padding-top: 20px; font-size: 14px}<\/style><body><div class=\"title\">  Заголовок<\/div><div class=\"text-main\">  Текст<\/div><div class=\"text-footer\">  Футер<\/div><\/body>\"\n```","d":false,"markdownfile":[{"ext":"md","file":"343_93_markdownfile.md","name":"func_textByTemplate.md","size":1563}]},{"name":"strMd5","n":["str"],"t":"(str: )","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["str"],"markdown_text":"### <a name=\"fn-strMd5\"><\/a>strMd5\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strMd5(str: )\n```\nВозвращает [строка][6] в md5-хеш.\n\n\n**Обязательные параметры**\n\n+ **str** - [одна][14] [строка][6] или [число][5] для хеширования.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: strMd5(str: \"какая-то строка\")\n\n\/\/ Результат: \"15e79710ef30825afe1dc5c4d3fb5849\"\n```","d":false,"markdownfile":[{"ext":"md","file":"343_114_markdownfile.md","name":"func_strMd5.md","size":648}]},{"name":"strGz","n":["str"],"t":"(str: )","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["str"],"markdown_text":"### <a name=\"fn-strGz\"><\/a>strGz\n\nСложность: **<4>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strGz(str: )\n```\nВозвращает gz-упакованную строку `str:`.\n\n\n**Обязательные параметры**\n\n+ **str** — [одна][14] [строка][6] или [число][5] для упаковки.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: set(table: 'testsimp'; field: 'file'=$fileList)\n\tfileList: listCreate(item: $fileRow)\n\t\tfileRow: rowCreate(field: \"filestring\"=$gz; field: \"name\"=\"text.txt.gz\")\n\t\t\tgz: strGz(str: \"Текстовая строка\")\n\/\/ Результат: null\n\/\/ В ячейке file таблицы testsimp - файл text.txt.gz\n```","d":false,"markdownfile":[{"ext":"md","file":"343_67_markdownfile.md","name":"func_strGz.md","size":865}]},{"name":"strUnGz","n":["str"],"t":"(str: )","m":[],"kategoriya_funkcii":"4","zapolnit_shablon":null,"p":["str"],"markdown_text":"### <a name=\"fn-strGz\"><\/a>strGz\n\nСложность: **<4>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: strGz(str: )\n```\nВозвращает распакованную gz-строку `str:`  или false, если строку декодировать не удалось.\n\n\n**Обязательные параметры**\n\n+ **str** — [одна][14] [строка][6] или [число][5] для упаковки.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: strUnGz(str: $fileContent)\n\tfileContent: fileGetContent(file: #gzfile[0][\"file\"])\n\/\/ Результат: распакованный текст из файла\n\n```","d":false,"markdownfile":[{"ext":"md","file":"343_119_markdownfile.md","name":"func_strUnGz.md","size":798}]},{"name":"listCreate","n":["item"],"t":"(item: )","m":["item"],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["item"],"markdown_text":"### <a name=\"fn-listCreate\"><\/a>listCreate\n\nСложность: **<2>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listCreate(item: )\n```\nСоздает [список][14] из элементов.\n\n\n**Необязательный множественный параметр**\n\n+ **item** — элементы из которых создается список. Количество параметров определяет количество элементов в списке.\n\t\n\t+ Могжет задаваться как [одинарные значения так и списки][14] [чисел][5], [строк][6], [дат][7] и [булевых значений][8].\n\t+ Порядок элементов в списке будет соответствовать тому порядку в котором они указаны в функции.\n\t+ При отсутствии параметров будет создан [пустой список][30].\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample1: listCreate(item: 1; item: 2; item: 4; item: \"\")\n\n\/\/ Результат: [1,2,4,\"\"]\n```\n\n**Пример 2**\n\n```totum\nexample2: listCreate(item: \"Alex\"; item: \"Sam\"; item: \"Mike\")\n\n\/\/ Результат: [\"Alex\",\"Sam\",\"Mike\"]\n```\n\n**Пример 3**\n\n```totum\nexample3: listCreate()\n\n\/\/ Результат: []\n```","d":false,"markdownfile":[{"ext":"md","file":"343_45_markdownfile.md","name":"func_listCreate.md","size":1513}]},{"name":"listMax","n":["list"],"t":"(list: ; default: )","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list","default"],"markdown_text":"### <a name=\"fn-listMax\"><\/a>listMax\n\nСложность: **<1>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listMax(list: ; default: )\n```\nВозвращает максимальное значение списка. Результатом работы является [одно значение][14], за исключением случая когда возвращается значение указанное в параметре `default`.\n\n\n**Обязательные параметры**\n\n+ **list** — [список][14] [чисел][5], [строк][6], [дат][7] в котором ищется максимальное значение.\n\n\t+ Если передан ряд чисел, то они будут обрабатываться как числа даже если переданы как строки.\n\n\n\n**Необязательные параметры**\n\n+ **default** — значение возвращаемое функцией при передаче в `list:` пустого списка.\n\t\n\t+ Задается как [одинарное значение или список][14] из [чисел][5], [строк][6], [дат][7] или [булевого значения][8].\n\t+ При отсутствии параметра при передаче в `list:` пустого списка функция вернет `ОШБК!`\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\n\nexample1: listmax(list: $list1)\n\tlist1: listCreate(item: 35; item: 78; item: 13)\n\n\/\/ Результат: 78\n```\n\n**Пример 2**\n\n```totum\nexample2: listmax(list: $list2)\n\tlist2: listCreate(item: \"11\"; item: \"12\"; item: \"2\")\n\n\/\/ Результат: 12\n```\n\n**Пример 3**\n\n```totum\nexample3: listmax(list: $list3)\n\tlist3: listCreate()\n\n\/\/ Результат: \"ОШБК!\"\n```\n\n**Пример 4**\n\n```totum\nexample4: listmax(list: $list4; default: 0)\n\tlist4: listCreate()\n\n\/\/ Результат: 0\n```","d":false,"markdownfile":[{"ext":"md","file":"343_34_markdownfile.md","name":"func_listMax.md","size":2096}]},{"name":"listMin","n":["list"],"t":"(list: ; default: )","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list","default"],"markdown_text":"### <a name=\"fn-listMax\"><\/a>listMax\n\nСложность: **<1>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listMax(list: ; default: )\n```\nВозвращает минимальное значение списка. Результатом работы является [одно значение][14], за исключением случая когда возвращается значение указанное в параметре `default`.\n\n\n**Обязательные параметры**\n\n+ **list** — [список][14] [чисел][5], [строк][6], [дат][7] в котором ищется максимальное значение.\n\n\t+ Если передан ряд чисел, то они будут обрабатываться как числа даже если переданы как строки.\n\n\n\n**Необязательные параметры**\n\n+ **default** — значение возвращаемое функцией при передаче в `list:` пустого списка.\n\t+ Задается как [одинарное значение или список][14] из [чисел][5], [строк][6], [дат][7] или [булевого значения][8].\n\t+ При отсутствии параметра при передаче в `list:` пустого списка функция вернет `ОШБК!`\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\n\nexample1: listmax(list: $list1)\n\tlist1: listCreate(item: 35; item: 78; item: 13)\n\n\/\/ Результат: 13\n```\n\n**Пример 2**\n\n```totum\nexample2: listmax(list: $list2)\n\tlist2: listCreate(item: \"11\"; item: \"12\"; item: \"2\")\n\n\/\/ Результат: 2\n```\n\n**Пример 3**\n\n```totum\nexample3: listmax(list: $list3)\n\tlist3: listCreate()\n\n\/\/ Результат: \"ОШБК!\"\n```\n\n**Пример 4**\n\n```totum\nexample4: listmax(list: $list4; default: 0)\n\tlist4: listCreate()\n\n\/\/ Результат: 0\n```","d":false,"markdownfile":[{"ext":"md","file":"343_35_markdownfile.md","name":"func_listMin.md","size":2091}]},{"name":"listSum","n":["list"],"t":"(list: )","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list"],"markdown_text":"### <a name=\"fn-listSum\"><\/a>listSum\n\nСложность: **<1>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listSum(list: )\n```\nВозвращает [одно][14] [число][5], сумму значения списка `list:`. Все элементы списка должны быть [числовыми][5] значениями. \n\n\n**Обязательные параметры**\n\n+ **list** — [список][14] [чисел][5] значения которого суммируются.\n\n\n**ПРИМЕРЫ**\n\n\n```totum\nexample: listsum(list: $list)\n\tlist: listCreate(item: 10; item: 5; item: 5)\n\n\/\/ Результат: 20\n```","d":false,"markdownfile":[{"ext":"md","file":"343_36_markdownfile.md","name":"func_listSum.md","size":807}]},{"name":"listCount","n":["list"],"t":"(list: )","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list"],"markdown_text":"### <a name=\"fn-listCount\"><\/a>listCount\n\nСложность: **<1>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listCount(list: )\n```\nВозвращает [одно][14] [число][5], количество элементов списка `list:`.\n\n\n**Обязательные параметры**\n\n+ **list** — [список][14], элементы которого подсчитываются.\n\n\t+ Задается как [числа][5], [строки][6], [даты][7] или [булевые значения][8].\n\t+ Может состоять из [одинарных занчений или списков][14].\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample1: listcount(list: $list1)\n\tlist1: listCreate(item: \"Alex\"; item: \"Sam\"; item: \"Mike\")\n\n\/\/ Результат: 3\n```\n\n**Пример 2**\n\n```totum\nexample2: listcount(list: $list2)\n\tlist2: listCreate(item: 5; item: 10; item: 5)\n\n\/\/ Результат: 3\n```","d":false,"markdownfile":[{"ext":"md","file":"343_37_markdownfile.md","name":"func_listCount.md","size":1111}]},{"name":"listUniq","n":["list"],"t":"(list: )","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list"],"markdown_text":"### <a name=\"fn-listUniq\"><\/a>listUniq\n\nСложность: **<1>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listUniq(list: )\n```\nВозвращает [список][14] уникальных элементов списка `list:`.\n\n\n**Обязательные параметры**\n\n+ **list** — [список][14] в котором осуществляется поиск уникальных элементов: [чисел][5], [строк][6], [дат][7] или [булевых значений][8].\n\n\n**ПРИМЕРЫ**\n\n\n**Пример 1**\n\n```totum\nexample: listuniq(list: $list)\nlist: listCreate(item: \"Alex\"; item: \"Sam\"; item: \"Alex\")\n\n\/\/ Результат: [\"Alex\",\"Sam\"]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_38_markdownfile.md","name":"func_listUniq.md","size":864}]},{"name":"listItem","n":["list","item"],"t":"(list: ; item: )","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list","item"],"markdown_text":"### <a name=\"fn-listItem\"><\/a>listItem\n\nСложность: **<2>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listItem(list: ; item: )\n```\nВозвращает [одно][14] значение из списка `list:` под номером `item:`. Нумерация элементов списка начинается с 0 (ноля).\n\n\n**Обязательные параметры**\n\n+ **list** — [список][14], элемент которого выбирается.\n\n\t+ Задается как [числа][5], [строки][6], [даты][7] или [булевые значения][8].\n\t+ Может состоять из [одинарных занчений или списков][14].\n\n+ **item** — [одно][14] [число][5], номер элемента списка.\n\n\t+ Нумерация элементов списка начинается с 0 (ноль).\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: listitem(list: $list2; item: 1)\n\tlist2: listCreate(item: \"Alex\"; item: \"Sam\"; item: \"Alex\")\n\n\/\/ Результат: \"Sam\"\n```","d":false,"markdownfile":[{"ext":"md","file":"343_40_markdownfile.md","name":"func_listItem.md","size":1224}]},{"name":"listJoin","n":["list"],"t":"(list: ; str: )","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list","str"],"markdown_text":"### <a name=\"fn-listJoin\"><\/a>listJoin\n\nСложность: **<4>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listJoin(list: ; str: )\n```\nВозвращает объединенные в [строка][6] значения [списка][14] или [ассоциированного массива][30]. `str:` — строка, которая вставляется между элементами (клей).\n\n\n**Обязательные параметры**\n\n+ **list** — [список][14] или [ассоциированный массив][30], которые будут трансформироваться в строку.\n\n\n\n**Необязательные параметры**\n\n+ **str** — [одна][14] [строка][6] или [число][5] использующаяся как клей.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: listJoin(list: $list; str: \"-\")\n\tlist: listCreate(item: 1; item: 2; item: 3)\n\n\/\/ Результат: \"1-2-3\"\n```","d":false,"markdownfile":[{"ext":"md","file":"343_99_markdownfile.md","name":"func_listJoin.md","size":1131}]},{"name":"listCross","n":["list"],"t":"(list: ; list: )","m":["list"],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list"],"markdown_text":"### <a name=\"fn-listCross\"><\/a>listCross\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listCross(list: ; list: )\n```\nВозвращает [список][14] значений, содержащий все значения первого списка, которые содержатся во всех последующих списках. Может быть задано любое количество списков в которых будет искаться пересечение. \n\n\n**Обязательные параметры**\n\n+ **list** — [списки][14] [чисел][5], [строк][6], [дат][7] или [булевых значений][8] в которых будут искаться пересечения.\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\n\nexample: listcross(list: $list1; list: $list2)\n\tlist1: listCreate(item: 1; item: 1; item: 2; item: 3)\n\tlist2: listCreate(item: 2; item: 3)\n\tlist3: listCreate(item: 1; item: 2; item: 3)\n\n\/\/ Результат: [1, 1, 2]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_42_markdownfile.md","name":"func_listCross.md","size":1207}]},{"name":"listAdd","n":["list"],"t":"(list: ; list: ; item: )","m":["list","item"],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list","item"],"markdown_text":"### <a name=\"fn-listAdd\"><\/a>listAdd\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listAdd(list: ; list: ; item: )\n```\nСкладывает списки в указанном порядке и возвращает [список][14]. Может быть задано любое количество списков в которые будут сложены вместе. Значения в списках могут повторятся.\n\n\n**Обязательные множественные параметр**\n\n+ **list** — совмещаемые списки.\n\n\t+ Задается как [список][14] [чисел][5], [строк][6], [дат][7] или [булевых значений][8].\n\t+ Списки складываются в указанном порядке.\n\n**Необязательные множественные параметры**\n\n+ **item** — [одно][14] значение, которое может быть добавлено в список.\n\n\t+ Задается как  [число][5], [строка][6], [дата][7] или [булевое значение][8].\n\t+ Значения добавляются в конец списка в указанном порядке.\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample: listadd(list: $list1; list: $list2; item: 5)\n\tlist1: listCreate(item: 1; item: 2; item: 3)\n\tlist2: listCreate(item: 2; item: 3)\n\n\/\/ Результат: [1,2,3,2,3,5]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_43_markdownfile.md","name":"func_listAdd.md","size":1645}]},{"name":"listMinus","n":["list"],"t":"(list: ; list: ; item: )","m":["list","item"],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list","item"],"markdown_text":"### <a name=\"fn-listMinus\"><\/a>listMinus\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listMinus(list: ; list: ; item: )\n```\nВозвращает [список][14]. Вычитает из первого списка значения содержащиеся в последующих списках и отдельные значения. Может быть задано любое количество списков и отдельных значений.\n\n\n**Обязательные множественные параметры**\n\nНеобходимо, что бы присутствовало минимум два параметра, первый из которых `list:`.\n\n+ **list** — [список][14] [чисел][5], [строк][6], [дат][7] или [булевых значений][8].\n\t\n\t+ Списки вычитаются в указанном порядке.\n\n\n**Необязательные множественные параметры**\n\n+ **item** — значение, которое может быть исключено из списка.\n\t\n\t+ Задается как [одно][14] [число][5], [строка][6], [датой][7] или [булево значение][8]\n\t+ Значения добавляются в конец списка в указанном порядке.\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample: listminus(list: $list1; list: $list2; item: 2)\n\tlist1: listCreate(item: 1; item: 2; item: 3; item: 4)\n\tlist2: listCreate(item: 3; item: 4; item: 5)\n\n\/\/ Результат: [1]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_41_markdownfile.md","name":"func_listMinus.md","size":1759}]},{"name":"listCut","n":["list","cut"],"t":"(list: ; cut: \"first|last\"; num: 1)","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list","num","cut"],"markdown_text":"### <a name=\"fn-listCut\"><\/a>listCut\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listCut(list: ; cut: \"first|last\"; num: 1)\n```\nВозвращает список, уменьшенный на `num:` элементов с начала или с конца.\n\n\n**Обязательные параметры**\n\n+ **list** — [список][14] [чисел][5], [строк][6], [дат][7] в котором ищется максимальное значение.\n\n+ **cut** — [строка][6], сторона, с которой будут удалены элементы.\n\n\t+ `first` — с начала.\n\t+ `last`  — c конца.\n\n\n**Необязательные параметры**\n\n+ **num** — [число][5], количество удаляемых элементов, по умолчанию — `1`.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: listCut(list: $list; cut: \"first\"; num: 1)\n\tlist: listCreate(item: 1; item: 2)\n\t\n\/\/ Результат: [2]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_39_markdownfile.md","name":"func_listCut.md","size":1165}]},{"name":"listSection","n":["list","item"],"t":"(list: ; item: )","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list","item"],"markdown_text":"### <a name=\"fn-listSection\"><\/a>listSection\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listSection(list: ; item: )\n```\nВозвращает [список][14] из значений указанного в `item:` ключа на основе [ассоциированного массива][30].\n\n\n**Обязательные параметры**\n\n+ **list** — [ассоциированный массив][30] или [список][14] из которого будет браться колонка.\n\n+ **item** — ключ, значения которого отбираются, для [списков][14] ключ числовой.\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n*tree*\nid | title\n- | - \n1 | Системные таблицы\n2 | Основные\n3 | Доступы\n32 | Документация\n\n```totum\nexample1: listSection(list: $rowList; item: \"id\")\n\trowList: selectRowList(table: 'tree'; field: 'id'; field: 'title'; order: 'id' asc)\n\n\/\/ Результат: [1, 2, 3, 32]\n```\n\n**Пример 2**\n\n```totum\nexample2: listSection(list: $listList; item: 1)\n\tlistList: jsonExtract(text: \"[[1,2,3],[4,5,6]]\")\n\t\n\/\/ Результат: [2,5]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_81_markdownfile.md","name":"func_listSection.md","size":1366}]},{"name":"listFilter","n":["list","key"],"t":"(list: $list; key: \"key|value|item\" ><!= ; item: \"\")","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list","item","key"],"markdown_text":"### <a name=\"fn-listFilter\"><\/a>listFilter\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listFilter(list: $list; key: \"key|value|item\" ><!= ; item: \"\")\n```\nВозвращает [список][14] из элементов, подходящих по условиям фильтрации.\n\n\n**Обязательные параметры**\n\n+ **list** — список в котором осуществляется фильтрация.\n\n+ **key** — выражение из типа сравниваемого элемента, оператора сравнения и значения для сравнения.\n\n\t+ `key` — фильтрация строк осуществляется по числовым ключам списка (0,1,2...).\n\t+ `value` — фильтрация строк по значению.\n\t+ `item` — для [списков][14] [ассоциативных массивов][30], фильтрация строк по значению в колонке определенной в `item:`. \n\n**Необязательные параметры**\n\n+ **item** — в случае, когда сравниваемым элементом в `key:` выбран `item` — сюда нужно передать ключ этого `item`.\n\n>> Если лист содержит элемент без ключа `item` будет возвращена ошибка.\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample1: listFilter(list: $list1; key: \"item\" = \"tree\"; item: \"t\")\n\tlist1: listCreate(item: $row1_1; item: $row2_1)\n\t\trow1_1: rowCreate(field: \"t\" = \"pen\"; field: \"i\" = 1)\n\t\trow2_1: rowCreate(field: \"t\" = \"tree\"; field: \"i\" = 2)\n\n\/\/ Результат:\n\/\/ [\n\/\/  {\n\/\/    \"i\": 2,\n\/\/    \"t\": \"tree\"\n\/\/  }\n\/\/ ]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_69_markdownfile.md","name":"func_listFilter.md","size":1945}]},{"name":"linkToData","n":["type","title"],"t":"(type: \"text|table\"; title:\"\" ; width: 600; height: \"80hv\"; table: ''; text: ; data: $rowList; params: $row; refresh: false; header: true; footer: true)","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":["header","footer","type","width","data","text","refresh","table","title","params"],"markdown_text":"","d":true,"markdownfile":null},{"name":"listSearch","n":["list","key"],"t":"(list: $list; key: \"value|item\" ><!= ; item: \"\")","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list","item","key"],"markdown_text":"### <a name=\"fn-listSearch\"><\/a>listSearch\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listSearch(list: $list; key: \"value|item\" ><!= ; item: \"\")\n```\nВозвращает список ключей отвечающих условиям поиска по значениям или вложенным значениям.\n\n**Обязательные параметры**\n\n+ **list** — [список][14] или [ассоциированный массив][30] или [список][14] [ассоциированных массивов][30].\n\n\t+ Если это [список][14], то результатом будет [список][14] числовых ключей.\n\t+ Если это [ассоциированный массив][30], то результатом будет [список][14] строковых ключей.\n\t+ Если это [список][14] [ассоциированных массивов][30], то результатом будет [список][14] числовых ключей.\n\n+ **key** — выражение вида `\"тип элемента\" ><!= \"значение элемента\"`, определяющее диапазон выбора.\n\n\t+ `value` — поиск осуществляется по всему значению.\n\t\n\t\t+ Если это [список][14] [ассоциированных массивов][30], то `=` будет искать пересечения в [ассоциированных массивах][30], а `==` полное соответсвие буз учета порядка.\n\n\t+ `item` — поиск осуществляется по вложенному значению для [списка][14] [ассоциированных массивов][30].\n\n**Необязательные параметры**\n\n+ **item** — в случае, когда сравниваемым элементом в `key:` выбран `item` — сюда нужно передать название этого `item`.\n\n>> Если лист содержит элемент без ключа `item` будет возвращена ошибка!\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: listSearch(list: $list; key: \"item\" = \"tree\"; item: \"t\")\n\tlist: listCreate(item: $row1; item: $row2)\n\t\trow1: rowCreate(field: \"t\" = \"pen\"; field: \"i\" = 1)\n\t\trow2: rowCreate(field: \"t\" = \"tree\"; field: \"i\" = 2)\n\n\/\/ Результат: [1] (<— это 2-й элемент, а списки нумеруются от 0)\n```","d":false,"markdownfile":[{"ext":"md","file":"343_76_markdownfile.md","name":"func_listSearch.md","size":2671}]},{"name":"listSort","n":["list"],"t":"(list: ; type: \"number|string|regular\"; direction: \"asc|desc\"; key: \"value|key|item\"; item: \"\")","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list","direction","type","key","item"],"markdown_text":"### <a name=\"fn-listSort\"><\/a>listSort\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listSort(list: ; type: \"number|string|regular\"; direction: \"asc|desc\")\n```\nВозвращает сортированный [список][14].\n\n\n**Обязательные параметры**\n\n+ **list** — [список][14] для сортировки.\n\n\t+ Возможно использование [ассоциированного массива][30], но ключи будут потеряны.\n\n\n**Необязательные параметры**\n\n\n+ **type** — [строка][6], тип, к которому приводятся сортируемые элементы при сравнении.\n\n\t+ `number` — число.\n\t+ `string` — строка.\n\t+ `regular` — без приведения. Результат непредсказуем.\n\t\n\t\n+ **direction** — [строка][6], направление сортировки.\n\n\t+ `asc` — по возрастанию (по умолчанию).\n\t+ `desc` — по убыванию.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: listSort(list: $list; type: \"string\"; direction: \"asc\")\n\tlist: listCreate(item: 1; item: 2; item: 11; item: 21)\n\t\n\/\/ Результат: [1,11,2,21]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_102_markdownfile.md","name":"func_listSort.md","size":1433}]},{"name":"listMath","n":["num","list","operator"],"t":"(list: ; num: ; operator: )","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list","num","operator"],"markdown_text":"### <a name=\"fn-listMath\"><\/a>listMath\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listMath(list: ; num: ; operator: )\n```\nВозвращает [список][14], все элементы которого были изменены в соответствии с `operator:` и `num:`.\n\n\n**Обязательные параметры**\n\n+ **list** — [список][14], исходный список.\n\n+ **num** — [число][5] для арифметического действия.\n\n+ **operator** — [строка][6], математический оператор.\n\t\n\t+ `+` - прибавить\n\t+ `-` - отнять\n\t+ `*` - умножить\n\t+ `\/` - разделить\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: listMath(list: $list; num: 3; operator: \"*\")\n\tlist: listCreate(item: 1; item: 2; item: 11; item: 21)\n\t\n\/\/ Результат: [ 3, 6, 33, 63]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_104_markdownfile.md","name":"func_listMath.md","size":1067}]},{"name":"listRepeat","n":["num","item"],"t":"(item: ; num: )","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["item","num"],"markdown_text":"### <a name=\"fn-listRepeat\"><\/a>listRepeat\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listRepeat(item: ; num: )\n```\nВозвращает лист из повторенного `num:` раз элемента `item:`.\n\n\n**Обязательные параметры**\n\n+ **num** — [число][5], количество повторений элемента `item:`.\n\n+ **item** — значение любого типа.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: listRepeat(item: $row; num: 2)\n\trow: rowCreate(field: \"test\" = 1)\n\t\n\/\/ Результат: [\n\/\/  {\n\/\/    \"test\": 1\n\/\/  },\n\/\/  {\n\/\/    \"test\": 1\n\/\/  }\n\/\/ ]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_110_markdownfile.md","name":"func_listRepeat.md","size":822}]},{"name":"diffDates","n":["date","unit"],"t":"(date: ; date: ; unit: \"day\")","m":["date"],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":["date","unit"],"markdown_text":"","d":true,"markdownfile":null},{"name":"listNumberRange","n":["step","min","max"],"t":"(min: ; max: ; step: 1)","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["min","max","step"],"markdown_text":"### <a name=\"fn-listNumberRange\"><\/a>listNumberRange\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: listNumberRange(min: ; max: ; step: 1)\n```\nВозвращает [список][14] из чисел в заданном диапазоне идущих с шагом `step:`\n\t\n\n**Необязательные параметры**\n\n+ **min** — [число][5] от.\n\n+ **max** — [число][5] до.\n\n+ **step** — [число][5], шаг.\n\t\n\t+ Если > 0 — в порядке от `min:` включительно до `max:` исключительно.\n\t+ Если step < 0 — в порядке от `max:` включительно до `min:` исключительно.\n\t+ Если step = 0 — `ОШБК!`\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample1: listNumberRange(min: 1; max: 3; step: 0.5)\n\n\/\/ Результат: [1,1.5,2,2.5]\n```\n\n```totum\nexample2: listNumberRange(min: 1; max: 3; step: -0.5)\n\n\/\/ Результат: [3,2.5,2,1.5]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_117_markdownfile.md","name":"func_listNumberRange.md","size":1146}]},{"name":"rowCreate","n":["field"],"t":"(field: \"\" = $val)","m":["field"],"kategoriya_funkcii":"7","zapolnit_shablon":null,"p":["field"],"markdown_text":"### <a name=\"fn-rowCreate\"><\/a>rowCreate\n\nСложность: **<5>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: rowCreate(field: \"\" = )\n```\nВозвращает [ассоциативный массив][30] с основаниями в виде [name][18] полей указанных в `field:` и отображениями в виде их значений.\n\n\n**Необязательный множественный параметр**\n\n+ **field** — элементы из которых создается массив. Количество параметров `field:` определяет количество элементов в массиве. В двойных кавычках указываются основания `field = \"base\"`.\n\n\t+ Может задаваться как [одинарные значения и списки][14] [чисел][5], [строк][6], [дат][7] и [булевых значений][8].\n\t+ Порядок элементов в массиве будет соответствовать тому порядку в котором они указаны в функции.\n\t+ При отсутствии будет создан [пустой список][17].\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n```totum\nexample: rowCreate(field: 'name' = \"Alexey\"; field: 'age' = 35)\n\n\/\/Результат: {\"name\": \"Alexey\", \"age\": 35}\n```","d":false,"markdownfile":[{"ext":"md","file":"343_47_markdownfile.md","name":"func_rowCreate.md","size":1554}]},{"name":"rowListCreate","n":["field"],"t":"(field: \"\" = $fieldList)","m":["field"],"kategoriya_funkcii":"7","zapolnit_shablon":null,"p":["field"],"markdown_text":"### <a name=\"fn-rowListCreate\"><\/a>rowListCreate\n\nСложность: **<7>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: rowListCreate(field: \"\" = )\n```\nВозвращает [список][14] [ассоциативных массивов][30] с основаниями в виде [name][18] полей указанных в `field:` и отображениями в виде их значений создавая строки в порядке сортировки [списков][14] передаваемых в `field:`.\n\n\n**Обязательные параметры**\n\n+ **field** — элементы из которых создается массив. Количество параметров `field:` определяет количество элементов в массиве. В двойных кавычках указываются основания `field: = \"base\"`.\n\n\t+ Может задаваться как [одинарные значения и списки][14] [чисел][5], [строк][6], [дат][7] и [булевых значений][8].\n\t+ Порядок элементов в массиве будет соответствовать тому порядку в котором они указаны в функции.\n\t+ Порядок элементов в списке будет соответсвовать сортировке в списках.\n\t+ При отсутствии будет создан [пустой список][17].\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n```totum\nexample: rowlistCreate(field: 'name' = $names; field: 'age' = $ages)\n\tnames: listCreate(item: \"Alexey\"; item: \"Pavel\")\n\tages: listCreate(item: 32; item: 35)\n\n\/\/ Результат: \n\/\/ [\n\/\/ {\"name\": \"Alexey\", \"age\": 32},\n\/\/ {\"name\": \"Pavel\", \"age\": 35}\n\/\/ ]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_46_markdownfile.md","name":"func_rowListCreate.md","size":1962}]},{"name":"rowCreateByLists","n":["keys","values"],"t":"(keys: $keysList; values: $valuesList)","m":[],"kategoriya_funkcii":"7","zapolnit_shablon":null,"p":["keys","values"],"markdown_text":"### <a name=\"fn-rowCreateByLists\"><\/a>rowCreateByLists\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: rowCreateByLists(keys: $keysList; values: $valuesList)\n```\nВозвращает [ассоциативный массив][30] или `false`.\n\n\n**Обязательные параметры**\n\n+ **keys** — [список][14], содержащий [строки][6] или [числа][5], которые станут ключами для [массива][30].\n\n+ **values** — [список][14], содержащий любые данные, которые станут значениями.\n\n+ Размеры листов `keys:` и `values:` должны совпадать.\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n*cloud_kassir_sistemy_nalogooblojeniya*\nid | key | value\n- | - | -\n1 | 0 | Общая система налогообложения\n2 | 1 | Упрощенная система налогообложения (Доход)\n3 | 2 | Упрощенная система налогообложения (Доход минус Расход)\n4 | 3 | Единый налог на вмененный доход\n5 | 4 | Единый сельскохозяйственный налог\n6 | 5 | Патентная система налогообложения\n\n```totum\nexample: rowCreateByLists(keys: $keysList; values: $valuesList)\n\tkeysList: listSection(list: $select; item: \"key\")\n\tvaluesList: listSection(list: $select; item: \"value\")\n\t~select: selectRowList(table: 'cloud_kassir_sistemy_nalogooblojeniya'; field: 'key'; field: 'value'; where: 'key' > 3)\n\n\/\/ Результат: {\"4\":\"Единый сельскохозяйственный налог\", \"5\": \"Патентная система налогообложения\"}\n```","d":false,"markdownfile":[{"ext":"md","file":"343_96_markdownfile.md","name":"func_rowCreateByLists.md","size":1941}]},{"name":"rowAdd","n":["row"],"t":"(row: ; row: ; field: \"\" = $val)","m":["field","row"],"kategoriya_funkcii":"7","zapolnit_shablon":null,"p":["field","row"],"markdown_text":"### <a name=\"fn-rowAdd\"><\/a>rowAdd\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: rowAdd(row: ; row: ; field: \"\" = )\n```\nВозвращает [ассоциативный массив][30], дополненный и исправленный последующими `row:` и `field:`.\n\n\n**Обязательные параметры**\n\n+ **row** — [ассоциативный массив][30], который будет дополняться или изменяться.\n\n\t+ Множественный параметр, если указано несколько, то массивы будут сложены в указанном порядке.\n\n\n**Необязательные параметры**\n\n+ **field** — элементы которые будут добавлены в конец массива в указаном порядке. В двойных кавычках указываются основания `field: \"base\" = $value`.\n\n\t+ Может задаваться как [одинарные значения и списки][14] [чисел][5], [строк][6], [дат][7] и [булевых значений][8].\n\t+ Порядок элементов в массиве будет соответствовать тому порядку в котором они указаны в функции.\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: rowAdd(row: $row1; field: \"test2\" = \"2\"; field: \"test3\" = \"3\")\n\trow1: rowCreate(field: \"test1\" = \"1\"; field: \"test2\"=\"1\")\n\t\n\/\/ Результат: \n\/\/ {\n\/\/  \"test1\": \"1\",\n\/\/  \"test2\": \"2\",\n\/\/  \"test3\": \"3\"\n\/\/ }\n```","d":false,"markdownfile":[{"ext":"md","file":"343_44_markdownfile.md","name":"func_rowAdd.md","size":1772}]},{"name":"rowListAdd","n":["rowlist"],"t":"(rowlist: ; rowlist: ; field: \"\" = $val; field: \"\" = $valList)","m":["field","rowlist"],"kategoriya_funkcii":"7","zapolnit_shablon":null,"p":["field","rowlist"],"markdown_text":"### <a name=\"fn-rowListAdd\"><\/a>rowListAdd\n\nСложность: **<8>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: rowListAdd(rowlist: ; rowlist: ; field: \"\" = ; field: \"\" = )\n```\nВозвращает [список][14] [ассоциативных массивов][30], дополненный и исправленный последующими `rowList:` и `field:`.\n\n\n**Обязательные параметры**\n\n+ **rowlist** — [списки][14] [ассоциативных массивов][30], которые будут сложены.\n\n\t+ Добавляются или заменяются колонки.\n\t+ Количество элементов в списках должно быть одинаковым и соответствующим по порядку.\n\t+ Если количество элементов в списках разное, то недостающие элементы будут [пустотой][16].\n\n**Необязательные параметры**\n\n+ **field** — колонки, которые будут добавлены в массив в указаном порядке. В двойных кавычках указываются основания `field: \"base\" = $value`.\n\n\t+ Может задаваться как [одинарные значения и списки][14] [чисел][5], [строк][6], [дат][7] и [булевых значений][8].\n\t+ Порядок элементов в массиве будет соответствовать тому порядку в котором они указаны в функции.\n\t+ Если правым параметром является не [список][14] — добавляется одинаковое значение во все строки списка.\n\t\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: rowListAdd(rowlist: $rowList1; rowlist: $rowList2; field: \"test\" = 1; field: \"testlist\" = $valListl; field: \"test2\" = 0)\n\trowList1: jsonExtract(text: '[{\"test1\":1,\"test2\":1}, {\"test1\":2,\"test2\":2}, {\"test1\":3,\"test2\":3}]')\n\trowList2: jsonExtract(text: '[{\"test10\":10}, {\"test10\":20}, {\"test10\":30}]')\n\tvalListl: jsonExtract(text: '[5, 6, 7]')\n\n\/\/ Результат: [\n\/\/  {\n\/\/    \"test\": 1,\n\/\/    \"test1\": 1,\n\/\/    \"test2\": 0,\n\/\/    \"test10\": 10,\n\/\/    \"testlist\": 5\n\/\/  },\n\/\/  {\n\/\/    \"test\": 1,\n\/\/    \"test1\": 2,\n\/\/    \"test2\": 0,\n\/\/    \"test10\": 20,\n\/\/    \"testlist\": 6\n\/\/  },\n\/\/  {\n\/\/    \"test\": 1,\n\/\/    \"test1\": 3,\n\/\/    \"test2\": 0,\n\/\/    \"test10\": 30,\n\/\/    \"testlist\": 7\n\/\/  }\n\/\/ ]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_88_markdownfile.md","name":"func_rowListAdd.md","size":2699}]},{"name":"rowKeys","n":["row"],"t":"(row: )","m":[],"kategoriya_funkcii":"7","zapolnit_shablon":null,"p":["row"],"markdown_text":"### <a name=\"fn-rowKeys\"><\/a>rowKeys\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: rowKeys(row: )\n```\nВозвращает [список][14] из ключей [ассоциативного массива][30].\n\n\n**Обязательные параметры**\n\n+ **row** — [ассоциативный массив][30] по которому будут взяты ключи.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: rowKeys(row: $row)\n\trow: rowCreate(field: \"test1\" = \"1\"; field: \"test2\" = \"1\")\n\n\/\/ Результат: [\n\/\/  \"test1\",\n\/\/  \"test2\"\n\/\/ ]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_77_markdownfile.md","name":"func_rowKeys.md","size":755}]},{"name":"rowValues","n":["row"],"t":"(row: )","m":[],"kategoriya_funkcii":"7","zapolnit_shablon":null,"p":["row"],"markdown_text":"### <a name=\"fn-rowValues\"><\/a>rowValues\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: rowValues(row: )\n```\nВозвращает значения переданного [ассоциативного массива][30].\n\n\n**Обязательные параметры**\n\n+ **row** — [ассоциативный массив][30] по которому будут взяты значения.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: rowValues(row: $row)\n\trow: rowCreate(field: \"test1\" = \"1\"; field: \"test2\" = \"1\")\n\n\/\/ Результат: \n\/\/ [\n\/\/  \"1\",\n\/\/  \"1\"\n\/\/ ]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_78_markdownfile.md","name":"func_rowValues.md","size":768}]},{"name":"rowKeysReplace","n":["row","from","to"],"t":"(row: ; from: ; to: ; recursive: false)","m":[],"kategoriya_funkcii":"7","zapolnit_shablon":null,"p":["row","from","to","recursive"],"markdown_text":"### <a name=\"fn-rowKeysReplace\"><\/a>rowKeysReplace\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: rowKeysReplace(row: ; from: ; to: ; recursive: false)\n```\nВозвращает [ассоциативный массив][30] c ключами замененными с `from:` на `to:`.\n\n\n**Обязательные параметры**\n\n+ **row** — [список][14] или [ассоциированный массив][30] в котором будут заменятся ключи.\n\n+ **from** — [одна или список][14] [строк][6] которые будут искаться в ключах массива.\n\n+ **to** — [одна или список][14] [строк][6] на которые будут заменены совпадения из `from:` в ключах массива.\n\n+ Если во `from:` и `to:` передаются списки, то замены будут произведены попарно.\n\n\n\n**Необязательные параметры**\n\n+ **recursive** — проверять вложенные ключи для [списков][14] [ассоциированных массивов][30].\n\n\t+ `true` — искать внутри.\n\t+ `false` — не искать (по умолчанию).\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: rowKeysReplace(row: $rowList; from: \"a\"; to: \"c\"; recursive: true)\n\trowList: jsonExtract(text: '[{\"a\": 1, \"b\": 2}, {\"a\": 4, \"d\": 4}]')\n\t\n\/\/ Результат: [{\"b\": 2,\"c\": 1},{\"c\": 4,\"d\": 4}]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_97_markdownfile.md","name":"func_rowKeysReplace.md","size":1690}]},{"name":"rowKeysRemove","n":["row"],"t":"(row: ; key: ; keys: ; recursive: false)","m":["key"],"kategoriya_funkcii":"7","zapolnit_shablon":null,"p":["row","key","keys","recursive"],"markdown_text":"### <a name=\"fn-rowKeysRemove\"><\/a>rowKeysRemove\n\nСложность: **<6>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: rowKeysRemove(row: ; key: ; keys: ; recursive: false)\n```\nВозвращает [ассоциированный массив][30] с удаленными ключами (колонками) `key:` или `keys:`.\n\n\n**Обязательные параметры**\n\n+ **row** — [список][14] или [ассоциированный массив][30] в котором будут заменятся ключи.\n\n\n\n**Необязательные параметры**\n\n+ **key** — [строк][6], name-ключа (колонки) которую нужно удалить.\t\n\n+ **keys** — [список][14] [строк][6] name-ключей (колонок), которые нужно удалить.\t\n\n+ **recursive** — проверять вложенные ключи для [списков][14] [ассоциированных массивов][30].\n\n\t+ `true` — искать внутри.\n\t+ `false` — не искать (по умолчанию).\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: rowKeysRemove(row: $rowList; key: \"a\"; recursive: true)\n\trowList: jsonExtract(text: '[{\"a\": 1, \"b\": 2}, {\"a\": 4, \"d\": 4}]')\n\t\n\/\/ Результат: [{\"b\": 2},{\"d\": 4}]\n```","d":false,"markdownfile":[{"ext":"md","file":"343_98_markdownfile.md","name":"func_rowKeysRemove.md","size":1467}]},{"name":"if","n":["condition","then"],"t":"(condition: ; then: ; else: )","m":[],"kategoriya_funkcii":"8","zapolnit_shablon":null,"p":["condition","then","else"],"markdown_text":"### <a name=\"fn-if\"><\/a>if\n\nСложность: **<4>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: if(condition: ; then: ; else: )\n```\nВозвращает при верном условии `condition:` значение секции `then:`, в противном случае — значение секции `else:` либо `null`, если она не задана.\n\n\n**Обязательные параметры**\n\n+ **condition** — условие срабатывания вида `\"значение 1\" = \"значение 2\"`.\n\t\n\t+ Поле множественное.\n\t+ Выполняется последовательно.\n\t+ Если одно из `condition:` выполнилось в `false`, то ни последующие, ни `then:` рассчитаны не будут. \n\t+ Обе части могут передаваться как: [число][5], [строка][6], [дата][6] или [булевое значение][8].\n\t+ Обе части могут быть как [одним значением][14], так и [списком][14]. В зависимости от этого могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Возможны все [операторы сравнения][2].\n\n**Необязательные параметры**\n\nДля корректной работы функции должен присутствовать хотя бы один из них.\n\n+ **then** — значение, либо ссылка на строку или параметр, которые будут рассчитаны в случае, если все `condition:` выполнились в `true`.\n\n+ **else** — значение, либо ссылка на строку или параметр, которые будут рассчитаны в случае, если хотя бы один `condition:` выполнился в `false`.\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample1: if(condition: $test1 = 1; condition: $test11 = 2; then: true; else: false)\n\ttest1: 1\n\ttest11: 3\n\/\/ Результат: false \n```\n\n**Пример 2**\n\n```totum\nexample2: if(condition: $p1_2 < $p2_2; condition: $p2_2 < $p3_2; then: \"Start\"; else: \"Stop\")\np1_2: 10\np2_2: 20\np3_2: 30\n\n\/\/ Результат: \"Start\"\n```\n\n**Пример 3**\n\n```totum\nexample3: if(condition: $p1_3 > $p2_3; then: true)\np1_3: 10\np2_3: 20\n\n\/\/ Результат: \"\"\n```","d":false,"markdownfile":[{"ext":"md","file":"343_48_markdownfile.md","name":"func_if.md","size":2717}]},{"name":"while","n":[],"t":"(preaction: ; condition: ; limit: ; action: ; postaction: ; iterator: )","m":["condition","preaction","action","postaction"],"kategoriya_funkcii":"8","zapolnit_shablon":null,"p":["preaction","action","postaction","iterator","condition","limit"],"markdown_text":"### <a name=\"fn-while\"><\/a>while\n\nСложность: **<5>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: while(preaction: ; condition: ; limit: ; action: ; postaction: ; iterator: )\n```\nВыполняет действия `action:`, если выполняеются условия `condition:` с количеством повторений `limit:`, изменяя `iterator:` на +1 в каждой итерации. В секциях отличных от [Код действия][28] возвращает значение последнего `preaction|action|postaction` в зависимости от условий.\n\n\n**Необязательные параметры**\n\n+ **preaction** — [значение строки кода][9], действие выплняемое в любом случае до обработки секций `condition` и обработки итерациий.\n\n\t+ Множественный параметр — если указано несколько параметров, то они будут выполнены в той последовательности в которой указаны в функции.\n\t+ Последний `preaction` помимо действия или вместе с ним (зависит от [функции действия][24]) возвращает значение, если нет последующих `action`, `postaction` или они не выполнены по условиям `condition`.\n\n+ **limit** — [число][5], определяет количество итераций.\n\n+ **condition** — условие срабатывания вида `\"значение 1\" = \"значение 2\"`.\n\t\n\t+ Поле множественное.\n\t+ Выполняется последовательно.\n\t+ Если одно из `condition:` выполнилось в `false`, то последующие `condition`, `action`, а также последующие операции не будут выполнены. \n\t+ Обе части могут передаваться как: [число][5], [строка][6], [дата][6] или [булевое значение][8].\n\t+ Обе части могут быть как [одним значением][14], так и [списком][14]. В зависимости от этого и от этого могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Возможны все [операторы сравнения][2].\n\n+ **action** — [значение строки кода][9], выполняемое действие внутри итерации. Повторяется в каждой итерации.\n\n\t+ Множественный параметр — если указано несколько параметров, то они будут выполнены в той последовательности в которой указаны в функции.\n\t+ Последний `action` помимо действия или вместе с ним (зависит от [функции действия][24]) возвращает значение.\n\n+ **postaction** — [значение строки кода][9], выполняется после всех итераций, при условии что выполнен хотя бы один `action`.\n\n\t+ Множественный параметр — если указано несколько параметров, то они будут выполнены в той последовательности в которой указаны в функции.\n\t+ Последний `action` помимо действия или вместе с ним (зависит от [функции действия][24]) возвращает значение.\n\n+ **iterator** — счетчик номера итерации.\n\n\t+ Нумерация итераций начинается с 0 (ноля).\n\t+ Задается как [одна][14] [строка][6] и обозначает название итератора для возможности обращения к нему как к [переменной внутри кода][11]. Назначайте разные переменные если используете несколько `while` с итераторами в одной секции кода.\n\t+ При отсутствии нет возможности обращения к значению итератора.\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample: while(action: $set1; action: $set2)\n\tset1: set(table: 'table'; field: 'field1' = 1)\n\tset2: set(table: 'table'; field: 'field2' = 2)\n\n\/\/ Результат: Присвоит полям field1 и field2 в таблице table значения 1 и 2 соответственно.\n```","d":false,"markdownfile":[{"ext":"md","file":"343_65_markdownfile.md","name":"func_while.md","size":5110}]},{"name":"var","n":["name"],"t":"(name: \"\"; value: ; default: )","m":[],"kategoriya_funkcii":"8","zapolnit_shablon":null,"p":["name","value","default"],"markdown_text":"### <a name=\"fn-var\"><\/a>var\n\nСложность: **<5>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: var(name: \"\"; value: ; default: )\n```\nСохраняет и отдает значение переменной внутри секции кода конкретного поля.\n\n\n**Обязательные параметры**\n\n+ **name** — [одна][14] [строка][5], имя переменной по которому идет обращение к данным.\n\n\t+ Необходимо следить, что бы в пределах одной секции кода `name:` не повторялись и не пересекались со значениями других [переменных внутри кода][11]. \n\n\n\n\n**Необязательные параметры**\n\n+ **value** — значение присваиваемое и возвращаемое переменной в цикле.\n\t\n\t+ Может передаваться как: [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14].\n\t+ Если отсутствует, то переменная возвращает последнее записанное значение.\n\n+ **default** — один раз за исполнение секции кода присваивает значение переменной в том случае если при обращении к ней она не определена.\n\n\t+ Может передаваться как: [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14].\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample: while(action: $set; limit: 10)\n\tset: var(name: \"count\"; value: $plus; default: 0)\n\tplus: $#count + 1\n\n\/\/ Результат: 10\n```","d":false,"markdownfile":[{"ext":"md","file":"343_3_markdownfile.md","name":"func_var.md","size":2155}]},{"name":"exec","n":["code"],"t":"(code: ; var: \"\" =; var: \"\" = )","m":["var"],"kategoriya_funkcii":"8","zapolnit_shablon":null,"p":["kod","var","code"],"markdown_text":"### <a name=\"fn-exec\"><\/a>exec\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: exec(code: ; var: \"\" =; var: \"\" = )\n```\nЗапускает выполнение кода переданного в параметре `code`. Вызванный код будет выполнятся по правилам той секции из которой был вызван.\n\n\n**Обязательные параметры**\n\n+ **code** — код для выполнения в [синтаксисе Totum][29].\n\t+ Может передаваться только как [одна][14] [строка][5] содержащая код в [синтаксисе Totum][29].\n\t+ Исполняемый код выполняется как код той секции из которой вызывается.\n\n\n\n**Необязательные параметры**\n\n+ **var** — определение переменной и ее значения для передачи в код определенный в `code:`.\n\t\n\t+ Может передаваться как: [число][5], [строка][6], [дата][7] или [булевое значение][8].\n\t+ Может быть как [одним значением][14], так и [списком][14].\n\t+ Множественный параметр (можно передать несколько переменных).\n\t+ Необходимо следить, что бы в пределах одной секции кода `var:` не повторялись и не пересекались со значениями других [переменных внутри кода][11].\n\t+ Обращение к переменным из кода определенного в `code:` идет через обращение к [переменным внутри кода][11]. \n\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample: exec(code: #h_code_text; var: \"varname\" = 10)\n\n\/\/ h_code_text \n\/\/ \"=: 10 + $#varname\"\n\n\/\/ Результат: 20\n```","d":false,"markdownfile":[{"ext":"md","file":"343_68_markdownfile.md","name":"func_exec.md","size":2187}]},{"name":"errorExeption","n":["text"],"t":"(text: )","m":[],"kategoriya_funkcii":"8","zapolnit_shablon":null,"p":["text"],"markdown_text":"### <a name=\"fn-errorExeption\"><\/a>errorExeption\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: errorExeption(text: )\n```\nПрерывает выполение всей цепочки кодов и экшенов, отменяя все совершенные изменения. \n\n>> Если цепочка отлавливает исключения через функцию [tryCatch](#fn-tryCatch), то выполнение продолжится с блока `Catch` этой функции.\n>> Указанное в `text` сообщение попадет в переменную с названием, заданным параметром `error` этого вызова функции [tryCatch](#fn-tryCatch). \n\n\n**Обязательные параметры**\n\n+ **text** —[число][5] или [строка][6], описание ошибки для пользователя.\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: if(condition: $#nfv=\"Недопустимое значение\"; then: $error)\n\terror: errorExeption(text: \"Вы ввели недопустимое значение. Ничего не сохранилось.\")\n\n\/\/ Результат: Если код выполнялся в рамках веб-сессии, пользователю выведется сообщение об ошибке с текстом: \"Вы ввели недопустимое значение. Ничего не сохранилось.\" и указанием названия таблицы, в которой размещался код. \n\/\/ Если код выполнялся  api-скриптом, ему вернется сообщение об ошибке в формате этого api. \n\/\/ Крон получит exeption и может отправить письмо об ошибке администратору. \n```","d":false,"markdownfile":[{"ext":"md","file":"343_82_markdownfile.md","name":"func_errorExeption.md","size":2040}]},{"name":"tryCatch","n":["try","catch"],"t":"(try: ; catch: ; error: \"exception\")","m":[],"kategoriya_funkcii":"8","zapolnit_shablon":null,"p":["try","catch","error"],"markdown_text":"### <a name=\"fn-tryCatch\"><\/a>tryCatch\n\nСложность: **<8>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: tryCatch(try: ; catch: ; error: \"exception\")\n```\nВозвращает значение секции `try:`. В случае если при выполнении `try:` было сгенерировано исключение, значение секции `catch:`.\n\n\n**Обязательные параметры**\n\n+ **try** — [значение строки кода][9], основная секция.\n\n+ **catch** — секция, которая выполняется в случае возникнования любой ошибки (в том числе ошибка базы данных) в секции `try:`.\n\n\n**Необязательные параметры**\n\n+ **error** — переменная, в которую будет передан текст ошибки в случае ошибки.\n\n\t+ Задается как [одна][14] [строка][6] и обозначает название итератора для возможности обращения к нему как к [переменной внутри кода][11]. Назначайте разные переменные если используете несколько `while` с итераторами в одной секции кода.\n\t+ При отсутствии нет возможности обращения к значению итератора.\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\n```totum\nexample1: tryCatch(try: $test1; catch: 2; error: \"exception\")\n\ttest1: 1\n\t\n\/\/ Результат: 1\n```\n\n**Пример 2**\n\n```totum\nexample: tryCatch(try: $test2; catch: $#exception; error: \"exception\")\n\ttest2: errorExeption(text: \"test\")\n\t\n\/\/ Результат: test\n```","d":false,"markdownfile":[{"ext":"md","file":"343_95_markdownfile.md","name":"func_tryCatch.md","size":1962}]},{"name":"reCalculate","n":["table"],"t":"(table: ''; cycle: ; hash: ; where: '' = )","m":["where"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","cycle","hash","where"],"markdown_text":"### <a name=\"fn-reCalculate\"><\/a>reCalculate\n\nСложность: **<4>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: reCalculate(table: ''; cycle: ; hash: ; where: '' = )\n```\nПересчитывает указанную таблицу определенную в `table:` в соответстви с ее [единицей пересчета][25].\n\n>> Эта функция может вызываться из любой секции кода, что бы можно было пересчитать таблицу из которой беруться данные перед тем как брать данные!\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы для пересчета.\n\n\n**Необязательные параметры**\n\n+ **cycle** — определяет цикл, если таблица `table:` является [расчетной в цикле][1].\t\n\t\n\t+ Может передаваться только как [одно или список][14] [чисел][5].\n\t+ Параметр отсутствует, если таблица `table:` находится в [дереве][15].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям для таблиц со строчными [единицами пересчета][44] не выбирается ни одной строки, то будет пересчитан только [хэдер][26].\n\t+ Если в `table:` определена таблица с табличной [единицей пересчета][44], то независимо от наличия\/отсутвия параметра и результатов его работы будет пересчитана вся таблица.\n\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\ntablename — таблица со строчной [единицей пересчета][25].\n| id |  fieldname|\n|--|--|\n| 1 |  test1|\n| 2 |  test2|\n| 3 |  test3|\n\n```totum\nexample1: recalculate(table: 'tablename'; where: 'fieldname' = \"test3\")\n\n\/\/ Результат: пересчет строки id = 3 \n```\n\n**Пример 2**\n\ntablename — расчетная таблица являющаяся [единицей пересчета][25].\n| id |  fieldname|\n|--|--|\n| 1 |  test1|\n| 2 |  test2|\n| 3 |  test3|\n\n```totum\nexample2: recalculate(table: 'tablename')\n\n\/\/ Результат: пересчет всех полей\n```\n\n**Пример 3**\n\ntablename — таблица со строчной [единицей пересчета][25] и полями в  [хэдере][26].\n\nh_fieldname\n| id |  fieldname|\n|--|--|\n| 1 |  test1|\n| 2 |  test2|\n| 3 |  test3|\n\n```totum\nexample3: recalculate(table: 'tablename'; where: 'id' = 0)\n\n\/\/ Результат: пересчет только h_fieldname\n```","d":false,"markdownfile":[{"ext":"md","file":"343_54_markdownfile.md","name":"func_reCalculate.md","size":4221}]},{"name":"pin","n":["table","field"],"t":"(table: ''; cycle: ; hash: ; field: ''; where: '' = ; log: true)","m":["field","where"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","log"],"markdown_text":"### <a name=\"fn-pin\"><\/a>pin\n\nСложность: **<2>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: pin(table: ''; cycle: ; hash: ; field: ''; where: '' = ; log: true)\n```\nУстанавливает фиксацию значения для поля с активной секцией [кода][27]. Для строчной части в одной строке.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы в которой производится действие.\n\n+ **field** — [name-параметр][3] поле в таблице `table:`.\n\n\t+ Множественный параметр, можно указать несколько полей.\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Выборка row возможна только из [строчной части][13] таблицы.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям выбираются значения из нескольких строк, то результатом работы функции будет является изменение в первой строке в соответсвии с сортировкой заданой в `order:`.\n\t+ Если по условиям не выбирается ни одной строки, то действие осуществлено не будет.\n\t+ Для изменения поля вне [строчной части][13] не используется.\n\t\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  10 |  20 |\n| 2 |  12 |  20 |\n| 3 |  10 |  20 |\n\n```totum\nexample: pin(table: 'tablename'; field: 'fieldname1'; where: 'id' = 2)\n```\nРезультат:\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  10 |  20 |\n| 2 |  10 [HAND] |  20 |\n| 3 |  10 |  20 |","d":false,"markdownfile":[{"ext":"md","file":"343_21_markdownfile.md","name":"func_pin.md","size":3469}]},{"name":"pinList","n":["table","field"],"t":"(table: ''; cycle: ; hash: ; field: ''; where: '' = ; log: true)","m":["field","where"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","log"],"markdown_text":"### <a name=\"fn-pinList\"><\/a>pinList\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: pinList(table: ''; cycle: ; hash: ; field: ''; where: '' = ; log: true)\n```\nУстанавливает фиксацию значения для поля с активной секцией [кода][27] в нескольких строках. Вне строчной части не применяется.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы в которой производится действие.\n\n+ **field** — [name-параметр][3] поле в таблице `table:`.\n\n\t+ Множественный параметр, можно указать несколько полей.\n\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Выборка row возможна только из [строчной части][13] таблицы.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям выбираются значения из нескольких строк, то результатом работы функции будет является изменение во всех строках.\n\t+ Если по условиям не выбирается ни одной строки, то действие осуществлено не будет.\n\t+ Для изменения поля вне [строчной части][13] не используется.\n\t\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  10 |  20 |\n| 2 |  10 |  20 |\n| 3 |  10 |  20 |\n\n```totum\nexample: pinList(table: 'tablename'; field: 'fieldname1'; where: 'id' >= 2)\n```\nРезультат:\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  10 |  20 |\n| 2 |  10 [HAND] |  20 |\n| 3 |  10 [HAND] |  20 |","d":false,"markdownfile":[{"ext":"md","file":"343_22_markdownfile.md","name":"func_pinList.md","size":3455}]},{"name":"insert","n":["table"],"t":"(table: ''; cycle: ; hash: ; field: '' = ; inserts: \"inserts\"; after: ; log: true)","m":["field"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","field","cycle","hash","inserts","after","log"],"markdown_text":"### <a name=\"fn-insert\"><\/a>insert\n\nСложность: **<3>**\n\nДоступен в секциях: [Код действия][28]\n```totum\n=: insert(table: ''; cycle: ; hash: ; field: '' = ; inserts: \"inserts\"; after: ; log: true)\n```\nФункция действия — возвращает `null`.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3], таблица в которую будет добавляться строка.\n\n\n**Необязательные параметры**\n\n+ **field** — в формате `'name' = \"значение\"`. Заполняемые при вставке поля (может вставляться строка без данных).\n\n\t+ Множественный параметр, порядок не имеет значения, соответствие определяется по [name][18].\n\t+ Поля не переданные через `field:` будут рассчитаны в соответствии со своей секцией кода или дефаултных значений.\n\n+ **cycle** — определяет цикл, если таблица `table:` является [рассчетной в цикле][1].\t\n\t\n\t+ Может передаваться только как [одно или список][14] [чисел][5].\n\t+ Параметр отсутствует, если таблица `table:` находится в [дереве][15].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **inserts** — имя переменной, в которую будет добавлен лист с id вставленных строк в результате операции.\n\n\t+ Задается как [одна][14] [строка][6] и обозначает название переменной для возможности обращения к ней как к [переменной внутри кода][11]. Назначайте разные переменные если используете несколько `while` с итераторами в одной секции кода.\n\n+ **after** — [число][5], для таблиц сортируемых по `n` — id строки, после которой вставить данную.\n\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n\n**ПРИМЕРЫ**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  test21 |  test22 |\n| 3 |  test31 |  test23 |\n\n```totum\nexample: while(action: $insert; action: $showid)\n\tinsert: insert(table: 'tablename'; field: 'fieldname1' = \"test\"; field: 'fieldname2' = \"globcalcs\"; inserts: \"shownewid\")\n\tshowid: linktodata(type: \"text\"; title: \"Добавлены строки\"; text: $#shownewid)\n\n\/\/ Результат: Добавлена строка, код возвращает значение [4]\n```\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  test21 |  test22 |\n| 3 |  test31 |  test23 |\n| 4 |  xxx |  yyy |","d":false,"markdownfile":[{"ext":"md","file":"343_13_markdownfile.md","name":"func_insert.md","size":3156}]},{"name":"insertList","n":["table","field"],"t":"(table: ''; cycle: ; hash: ; field: '' = $list; inserts: \"inserts\"; after: ; log: true)","m":["field"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","field","cycle","hash","after","inserts","log"],"markdown_text":"### <a name=\"fn-insertList\"><\/a>insertList\n\nСложность: **<4>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: insertList(table: ''; cycle: ; hash: ; field: '' = ; inserts: \"inserts\"; after: ; log: )\n```\nДобавляет несколько строк в таблицу `table:` с указанием значений полей `field:`\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3], name таблицы в которую добавляются строки.\n\n+ **field** — в формате `'name' = \"значение\"`. Заполняемые при вставке поля (может вставляться строка без данных).\n\n\t+ Множественный параметр, порядок не имеет значения, соответствие определяется по [name][18].\n\t+ Поля не переданные через `field:` будут рассчитаны в соответствии со своей секцией кода или дефаултных значений.\n\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\t\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **inserts** — имя переменной, в которую будет добавлен лист с id вставленных строк в результате операции\n\n\t+ Задается как [одна][14] [строка][6] и обозначает название переменной для возможности обращения к ней как к [переменной внутри кода][11]. Назначайте разные переменные если используете несколько `while` с итераторами в одной секции кода.\n\n+ **after** — [число][5], для таблиц сортируемых по `n` — id строки, после которой вставить данную.\n\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  test21 |  test22 |\n| 3 |  test31 |  test23 |\n\n```totum\nexample: while(action: $insert; action: $showid)\n\tinsert: insertList(table: 'tablename'; field: 'fieldname1' = $list1; field: 'fieldname2' = $list2; inserts: \"shownewid\")\n\t\tlist1: listCreate(item: \"XX\"; item: \"XXX\")\n\t\tlist2: listCreate(item: \"YY\"; item: \"YYY\")\n\n\tshowid: $#shownewid\n\n\/\/ Результат: Добавлены строки, код возвращает значение [4,5]\n```\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  test21 |  test22 |\n| 3 |  test31 |  test23 |\n| 4 |  XX |  YY |\n| 5 |  XXX |  YYY |","d":false,"markdownfile":[{"ext":"md","file":"343_14_markdownfile.md","name":"func_insertList.md","size":3106}]},{"name":"updatesCreateFile","n":["data"],"t":"(data: $data)","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":["data"],"markdown_text":"","d":true,"markdownfile":null},{"name":"updatesReadFileStructure","n":["file"],"t":"(file: $file)","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":["file"],"markdown_text":"","d":true,"markdownfile":null},{"name":"UpdateTablesIndexes","n":[],"t":"()","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":[],"markdown_text":"","d":true,"markdownfile":null},{"name":"set","n":["table","field"],"t":"(table: ''; cycle: ; hash: ; field: '' = ; where: '' = ; log: true)","m":["field","where"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","log"],"markdown_text":"### <a name=\"fn-setList\"><\/a>setList\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: set(table: ''; cycle: ; hash: ; field: '' = ; where: '' = ; log: true)\n```\nИзменяет значение в одной строке в поле `field:` в таблице `table:`.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы в которой изменяются данные.\n\n+ **field** — [name-параметр][3] поле в таблице `table:` в котором изменяются данные, а также его значение.\n\n\t+ Может передаваться [одним значением][14] или [списком][14] как [число][5], [строка][6], [дата][7] или [булево значение][8] в зависимости от типа поля `field:` в таблице `table:`.\n\t+ При изменении произойдет пересчет всех остальных полей входящих в изменяющуюся [единицу пересчета][25].\n\t+ Множественный параметр — может быть передано значение нескольких полей. Порядок не имеет значение, соответствие определяется по [name][18].\n\t+ Для [чисел][5] может быть передано относительное значение в виде [одного][14] [числа][5] со следующим синтаксисом `'fieldname' + Y` (добавить) или `'fieldname' - Y` (вычесть), `'fieldname' * Y` (умножить) и `'fieldname' \/ Y` (разделить), а также аналогичные действия с процентами в случае когда Y задан напрямую числом `'fieldname' + 2%` или передается в сконструированном значении Y% через [строку кода][9].\n\t+ Для [селектов][5] можно добавлять или удалять основания передавая их в виде [одного][14] [числа][5] или [списка][14].\n\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Выборка row возможна только из [строчной части][13] таблицы.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям выбираются значения из нескольких строк, то результатом работы функции будет является изменение в первой строке в соответсвии с сортировкой заданой в `order:`.\n\t+ Если по условиям не выбирается ни одной строки, то действие осуществлено не будет.\n\t+ Для изменения поля вне [строчной части][13] не используется.\n\t\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  test21 |  test22 |\n| 3 |  test31 |  test23 |\n\n```totum\nexample1: set(table: 'tablename'; field: 'fieldname1' = \"ZZZ\"; where: 'fieldname2' = \"test22\")\n```\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  ZZZ |  test22 |\n| 3 |  test31 |  test23 |\n\n**Пример 2**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  10 |\n| 2 |  test21 |  20 |\n| 3 |  test31 |  30 |\n\n```totum\nexample2: set(table: 'tablename'; field: 'fieldname2' + 100; where: 'fieldname1' = \"test21\")\n```\nРезультат:\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  10 |\n| 2 |  test21 |  120 |\n| 3 |  test31 |  30 |","d":false,"markdownfile":[{"ext":"md","file":"343_17_markdownfile.md","name":"func_set.md","size":5398}]},{"name":"setList","n":["table","field"],"t":"(table: ''; cycle: ; hash: ; field: '' = ; where: '' = ; log: true)","m":["field","where"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","log"],"markdown_text":"### <a name=\"fn-set\"><\/a>set\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: setList(table: ''; cycle: ; hash: ; field: '' = ; where: '' = ; log: )\n```\nИзменяет значение в нескольких строках в поле `field:` в таблице `table:`. Применимо только для изменения поля расположенного в [строчной части][13].\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы в которой изменяются данные.\n\n+ **field** — [name-параметр][3] поле в таблице `table:` в котором изменяются данные, а также его значение.\n\n\t+ Может передаваться [одним значением][14] или [списком][14] как [число][5], [строка][6], [дата][7] или [булево значение][8] в зависимости от типа поля `field:` в таблице `table:`.\n\t+ При изменении произойдет пересчет всех остальных полей входящих в изменяющуюся [единицу пересчета][25].\n\t+ Множественный параметр — может быть передано значение нескольких полей. Порядок не имеет значение, соответствие определяется по [name][18].\n\t+ Для [чисел][5] может быть передано относительное значение в виде [одного][14] [числа][5] со следующим синтаксисом `'fieldname' + Y` (добавить) или `'fieldname' - Y` (вычесть), `'fieldname' * Y` (умножить) и `'fieldname' \/ Y` (разделить), а также аналогичные действия с процентами в случае когда Y задан напрямую числом `'fieldname' + 2%` или передается в сконструированном значении Y% через [строку кода][9].\n\t+ Для [селектов][5] можно добавлять или удалять основания передавая их в виде [одного][14] [числа][5] или [списка][14].\n\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Выборка row возможна только из [строчной части][13] таблицы.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям выбираются значения из нескольких строк, то результатом работы функции будет является одинаковые изменения во всех строках.\n\t+ Если по условиям не выбирается ни одной строки, то действие осуществлено не будет.\n\t\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  test21 |  test22 |\n| 3 |  test31 |  test23 |\n\n```totum\nexample1: setlist(table: 'tablename'; field: 'fieldname1' = \"ZZZ\"; where: 'id' >= 2)\n```\nРезультат:\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  ZZZ |  test22 |\n| 3 |  ZZZ |  test23 |\n\n**Пример 2**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  10 |\n| 2 |  test21 |  20 |\n| 3 |  test31 |  30 |\n\n```totum\nexample2: set(table: 'tablename'; field: 'fieldname2' - 10%; where: 'id' < 3)\n```\nРезультат:\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  9 |\n| 2 |  test21 |  18 |\n| 3 |  test31 |  30 |","d":false,"markdownfile":[{"ext":"md","file":"343_18_markdownfile.md","name":"func_setList.md","size":5358}]},{"name":"duplicate","n":["table","field"],"t":"(table: ''; cycle: ; hash: ; field: '' = ; where: '' = ; after: ; log: true)","m":["field","where"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","inserts","after","log"],"markdown_text":"### <a name=\"fn-duplicate\"><\/a>duplicate\n\nСложность: **<4>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: duplicate(table: ''; cycle: ; hash: ; field: '' = ; where: '' = ; after: ; log: true)\n```\nДублирует одну строку в таблице `table:`. Применим только в [строчной части][13].\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы в которой производится дублирование.\n\n+ **field** — [name-параметр][3] поле в таблице `table:` в котором изменяются данные придублировании, а также его значение по формату `field: 'fieldname' = \"value\"`.\n\n\t+ Может передаваться [одним значением][14] или [списком][14] как [число][5], [строка][6], [дата][7] или [булево значение][8] в зависимости от типа поля `field:` в таблице `table:`.\n\t+ Множественный параметр — может быть передано значение нескольких полей. Порядок не имеет значение, соответствие определяется по [name][18].\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Параметр может отсутствовать, если поле не содержит строк (расположено вне [строчной части][13] таблицы). Если параметр отсутсвует для выборки из поля [строчной части][13], то результатом работы функции будет является [одно][14] первое значение в соответсвии с сортировкой заданой в `order:`.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям выбираются значения из нескольких строк, то результатом работы функции будет является дублирование первой строки в соответсвии с сортировкой заданой в `order:`.\n\t+ Если по условиям не выбирается ни одной строки, действие произведено не будет.\t\n\n+ **inserts** — имя переменной, в которую будет добавлен лист с id вставленных строк в результате операции\n\n\t+ Задается как [одна][14] [строка][6] и обозначает название переменной для возможности обращения к ней как к [переменной внутри кода][11]. Назначайте разные переменные если используете несколько `while` с итераторами в одной секции кода.\n\n+ **after** — [число][5], для таблиц сортируемых по `n` — id строки, после которой вставить данную.\n\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  test21 |  test22 |\n| 3 |  test31 |  test23 |\n\n```totum\nexample: duplicate(table: 'tablename'; field: 'fieldname1' = \"ZZZ\"; where: 'id' = 3)\n\n```\nРезультат:\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  test21 |  test22 |\n| 3 |  test31 |  test23 |\n| 4 |  ZZZ |  test23 |","d":false,"markdownfile":[{"ext":"md","file":"343_8_markdownfile.md","name":"func_duplicate.md","size":5205}]},{"name":"duplicateList","n":["table","field"],"t":"(table: ''; cycle: ; hash: ; field: '' = ; where: '' = ; after: ; log: true)","m":["field","where"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","after","inserts","log"],"markdown_text":"### <a name=\"fn-duplicateList\"><\/a>duplicateList\n\nСложность: **<4>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: duplicate(table: ''; cycle: ; hash: ; field: '' = ; where: '' = ; after: ; log: true)\n```\nДублирует несколько строк в таблице `table:`. Применим только в [строчной части][13].\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы в которой производится дублирование.\n\n+ **field** — [name-параметр][3] поле в таблице `table:` в котором изменяются данные при дублировании, а также его значение по формату `field: 'fieldname' = \"value\"`.\n\n\t+ Может передаваться [одним значением][14] или [списком][14] как [число][5], [строка][6], [дата][7] или [булево значение][8] в зависимости от типа поля `field:` в таблице `table:`.\n\t+ Множественный параметр — может быть передано значение нескольких полей. Порядок не имеет значение, соответствие определяется по [name][18].\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Параметр может отсутствовать, если поле не содержит строк (расположено вне [строчной части][13] таблицы). Если параметр отсутсвует для выборки из поля [строчной части][13], то результатом работы функции будет является [одно][14] первое значение в соответсвии с сортировкой заданой в `order:`.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям выбираются значения из нескольких строк, то результатом работы функции будет является дублирование всех строк в соответсвии с сортировкой заданой в `order:`.\n\t+ Если по условиям не выбирается ни одной строки, действие произведено не будет.\t\n\n+ **inserts** — имя переменной, в которую будет добавлен лист с id вставленных строк в результате операции\n\n\t+ Задается как [одна][14] [строка][6] и обозначает название переменной для возможности обращения к ней как к [переменной внутри кода][11]. Назначайте разные переменные если используете несколько `while` с итераторами в одной секции кода.\n\n+ **after** — [число][5], для таблиц сортируемых по `n` — id строки, после которой вставить данную.\n\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  test21 |  test22 |\n| 3 |  test31 |  test23 |\n\n```totum\nexample: duplicate(table: 'tablename'; field: 'fieldname1' = \"ZZZ\"; where: 'id' >=2)\n\n```\nРезультат:\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  test21 |  test22 |\n| 3 |  test31 |  test23 |\n| 4 |  ZZZ |  test22 |\n| 5 |  ZZZ |  test23 |","d":false,"markdownfile":[{"ext":"md","file":"343_9_markdownfile.md","name":"func_duplicateList.md","size":5239}]},{"name":"clear","n":["table","field"],"t":"(table: ''; cycle: ; hash: ; field: ''; where: '' = ; log: true)","m":["field","where"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","log"],"markdown_text":"### <a name=\"fn-clear\"><\/a>clear\n\nСложность: **<2>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: clear(table: ''; cycle: ; hash: ; field: ''; where: '' = ; log: true)\n```\nСбрасывает фиксацию значение для поля с активной секцией [кода][27] к расчетным значениям. Для строчной части в одной строке.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы в которой производится действие.\n\n+ **field** — [name-параметр][3] поле в таблице `table:`.\n\n\t+ Множественный параметр, можно указать несколько полей.\n\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Выборка row возможна только из [строчной части][13] таблицы.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям выбираются значения из нескольких строк, то результатом работы функции будет является изменение в первой строке в соответсвии с сортировкой заданой в `order:`.\n\t+ Если по условиям не выбирается ни одной строки, то действие осуществлено не будет.\n\t+ Для изменения поля вне [строчной части][13] не используется.\n\t\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  10 |  20 |\n| 2 |  12 [HAND] |  20 |\n| 3 |  10 |  20 |\n\n```totum\nexample: clear(table: 'tablename'; field: 'fieldname1'; where: 'id' = 2)\n```\nРезультат:\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  10 |  20 |\n| 2 |  10 |  20 |\n| 3 |  10 |  20 |","d":false,"markdownfile":[{"ext":"md","file":"343_19_markdownfile.md","name":"func_clear.md","size":3513}]},{"name":"updatesApply","n":[],"t":"(file: $filename)","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":["file"],"markdown_text":"","d":true,"markdownfile":null},{"name":"clearList","n":["table","field"],"t":"(table: ''; cycle: ; hash: ; field: ''; where: '' = ; log: true)","m":["field","where"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","log"],"markdown_text":"### <a name=\"fn-clearList\"><\/a>clearList\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: clear(table: ''; cycle: ; hash: ; field: ''; where: '' = ; log: true)\n```\nСбрасывает фиксацию значение для поля с активной секцией [кода][27] к расчетным значениям в нескольких строках. Вне строчной части не применяется.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы в которой производится действие.\n\n+ **field** — [name-параметр][3] поле в таблице `table:`.\n\n\t+ Множественный параметр, можно указать несколько полей.\n\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Выборка row возможна только из [строчной части][13] таблицы.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям выбираются значения из нескольких строк, то результатом работы функции будет является изменение во всех строках.\n\t+ Если по условиям не выбирается ни одной строки, то действие осуществлено не будет.\n\t+ Для изменения поля вне [строчной части][13] не используется.\n\t\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  10 |  20 |\n| 2 |  12 [HAND] |  20 |\n| 3 |  12 [HAND] |  20 |\n\n```totum\nexample: clearList(table: 'tablename'; field: 'fieldname1'; where: 'id' >= 2)\n```\nРезультат:\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  10 |  20 |\n| 2 |  10 |  20 |\n| 3 |  10 |  20 |","d":false,"markdownfile":[{"ext":"md","file":"343_20_markdownfile.md","name":"func_clearList.md","size":3494}]},{"name":"delete","n":["table","where"],"t":"(table: ''; cycle: ; hash: ; where: '' = ; log: true)","m":["where"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","cycle","hash","where","log"],"markdown_text":"### <a name=\"fn-delete\"><\/a>delete\n\nСложность: **<2>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: delete(table: ''; cycle: ; hash: ; where: '' = ; log: true)\n```\nУдаляет строку в таблице `table:` соответствующую условиям `where:`.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы из которой берутся данные.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Выборка возможна только из [строчной части][13] таблицы.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям выбираются значения из нескольких строк, то результатом работы функции будет удаление первой строки в соответсвии с сортировкой заданой в `order:`.\n\t+ Если по условиям не выбирается ни одной строки, то действие выполнятся не будет.\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  10 |  20 |\n| 2 |  10 |  20 |\n| 3 |  10 |  20 |\n\n```totum\nexample: delete(table: 'tablename'; where: 'id' = 2)\n```\nРезультат:\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  10 |  20 |\n| 3 |  10 |  20 |","d":false,"markdownfile":[{"ext":"md","file":"343_15_markdownfile.md","name":"func_delete.md","size":3004}]},{"name":"deleteList","n":["table","where"],"t":"(table: ''; cycle: ; hash: ; where: '' = ; log: true)","m":["where"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","cycle","hash","where","log"],"markdown_text":"### <a name=\"fn-deleteList\"><\/a>deleteList\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: delete(table: ''; cycle: ; hash: ; where: '' = ; log: true)\n```\nУдаляет несколько строк в таблице `table:` соответствующие условиям `where:`.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы из которой берутся данные.\n\n+ **where** — [name-параметр][3] условие выбора строк в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Множественный параметр — если указано несколько параметров `where:`, то выборка осуществляется на пересечении их условий, применяемых слева направо.\n\t+ Выборка возможна только из [строчной части][13] таблицы.\n\t+ Возможны любые [операторы сравнения][2].\n\t+ Может передаваться как [число][5], [строка][6], [дата][7] или [булевое значение][8]\n\t+ Может быть как [одним значением][14], так и [списком][14]. В зависимости от этого, и от того, что содержится в `where:` могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Если по условиям выбираются значения из нескольких строк, то результатом работы функции будет удаление всех строк соответсвующих сравнению.\n\t+ Если по условиям не выбирается ни одной строки, то действие выполнятся не будет.\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  10 |  20 |\n| 2 |  10 |  20 |\n| 3 |  10 |  20 |\n\n```totum\nexample: deleteList(table: 'tablename'; where: 'id' >= 2)\n```\nРезультат:\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  10 |  20 |","d":false,"markdownfile":[{"ext":"md","file":"343_16_markdownfile.md","name":"func_deleteList.md","size":2977}]},{"name":"setListExtended","n":["table","field"],"t":"(table: ''; cycle: ; hash: ; field: '' = $list; where: '' = $list; log: true)","m":["field","where"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","field","cycle","hash","where","log"],"markdown_text":"### <a name=\"fn-setListExtended\"><\/a>setListExtended\n\nСложность: **<7>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: setListExtended(table: ''; cycle: ; hash: ; field: '' = ; where: '' = ; log: true)\n```\nИзменяет значения в нескольких строках и полях таблицы одновременно.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы в которой изменяются данные.\n\n+ **field** — [name-параметр][3] поле в таблице `table:` в виде  — [name поля] [знак операции] [значение в виде одного или списка] [знак процента, если изменение производится в процентах относительно предыдущего значения].\n\n\t+ Множественный параметр, можно изменять несколько полей одновременно.\n\t+ В случае, если правый параметр в `field:` представлен в виде списка, изменение будет применено построчно в соответствии с аналогичным правым параметром в `where:`.\n\t+ Если первый по очереди параметр `field:` имеет правой частью [список][14], а последующий представляет собой другую [одно значение][14], то в каждую изменяемую строку будет установлено это значение.\n\t+ Если одни из списков в `field:` меньше другого и меньше количества изменяемых строк, то в качестве недостающих значений будет выставлен `null`.\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **where** — [name-параметр][3] условие выбора строки в [строчной части][13]. Левая часть определяет поле сравнения в таблице `table:`, а правая — значение сравнения. \n\n\t+ Если в правую часть передается [список][14] — он соотносится со списками в правой части параметров `field:`. Таким образом изменения формируются для множества строк сразу.\n\t\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n\n\n**ПРИМЕРЫ**\n\n*test*\nid | a | b | c\n_ | _ | _ | _\n1 | q | 10 | z\n2 | w | 20 | x\n3 | e | 30 | c\n\n\n```totum\nexample: setListExtended(table: 'test'; field: 'a' = $listA; field: 'b' + $listB; field: 'c' = \"z\"; where: 'id' = $listId)\n\tlistA: listCreate(item: \"r\"; item: \"t\"; item: \"y\")\n\tlistB: listCreate(item: 3; item: 2; item: 1)\n\tlistId: listCreate(item: 1; item: 2; item: 3)\n\t\n\/\/ Результат:  Таблица изменена:\n```\n*test*\nid | a | b | c\n_ | _ | _ | _\n1 | r | 13 | z\n2 | t | 22 | z\n3 | y | 31 | z","d":false,"markdownfile":[{"ext":"md","file":"343_87_markdownfile.md","name":"func_setListExtended.md","size":3539}]},{"name":"insertListExtended","n":["table"],"t":"(table: ''; cycle: ; hash: ; fields: ; field: '' = $list; inserts: \"inserts\"; after: ; log: true)","m":["field"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","field","fields","cycle","hash","inserts","after","log"],"markdown_text":"### <a name=\"fn-insertListExtended\"><\/a>insertListExtended\n\nСложность: **<7>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: insertListExtended(table: ''; cycle: ; hash: ; fields: ; field: '' = ; inserts: \"inserts\"; after: ; log: true)\n```\nДобавляет несколько строк в таблицу `table:` с указанием значений полей `field:`\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3], name таблицы в которую добавляются строки.\n\n\n\n**Необязательные параметры**\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\t\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **fields** — [ассоциативный массив][30], в качестве ключей которого выступают `name` полей, значения — списки для построчного заполнения добавляемых строк.\n\n+ **field** — в формате `'name' = \"значение\"`. Дополняет и заменяет, если посвторяется name поля указанное в `fields:`. Если правым значением выступает [одно значение][14], каждая из добавляемых строк будет содержать его.\n \n\n+ **inserts** — имя переменной, в которую будет добавлен [список][14] с id вставленных строк в результате операции.\n\n\t+ Задается как [одна][14] [строка][6] и обозначает название переменной для возможности обращения к ней как к [переменной внутри кода][11]. Не допускайте пересечения переменных внутри одной секции кода.\n\n+ **after** — [число][5], для таблиц сортируемых по `n` — id строки, после которой вставить новые.\n\n+ **log** — `true` для добавления операции во внутреннюю таблицу логирования.\n\n\n\n**ПРИМЕРЫ**\n\n**Пример 1**\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  test21 |  test22 |\n| 3 |  test31 |  test23 |\n\n```totum\nexample: while(action: $insert; action: $showid)\n\tinsert: insertListExtended(table: 'tablename'; fields: $row1; field: 'fieldname2' = $list2; inserts: \"shownewid\")\n\t\trow1: rowCreate(field: \"fieldname1\" = $list1)\n\t\tlist1: listCreate(item: \"XX\"; item: \"XXX\")\n\t\tlist2: listCreate(item: \"YY\"; item: \"YYY\")\n\n\tshowid: $#shownewid\n\n\/\/ Результат: Добавлены строки, код возвращает значение [4,5]\n```\n\ntablename\n| id | fieldname1 | fieldname2 |\n|--|--|--|\n| 1 |  test11 |  test12 |\n| 2 |  test21 |  test22 |\n| 3 |  test31 |  test23 |\n| 4 |  XX |  YY |\n| 5 |  XXX |  YYY |","d":false,"markdownfile":[{"ext":"md","file":"343_116_markdownfile.md","name":"func_insertListExtended.md","size":3221}]},{"name":"insertListExt","n":["table"],"t":"(table: ''; cycle: ; hash: ; fields: ; field: '' = $list; inserts: \"inserts\"; after: )","m":["field"],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","field","fields","cycle","hash","inserts","after","log"],"markdown_text":"","d":true,"markdownfile":null},{"name":"reCalculateCycle","n":["table","cycle"],"t":"(table: ''; cycle: )","m":[],"kategoriya_funkcii":"9","zapolnit_shablon":null,"p":["table","cycle"],"markdown_text":"### <a name=\"fn-reCalculateCycle\"><\/a>reCalculateCycle\n\nСложность: **<4>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: reCalculateCycle(table: ''; cycle: )\n```\nПерсчитывает последовательно таблицы цикла или циклов. Если в результате пересчета цикла таблица была обновлена, повторно пересчитываться она не будет.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы циклов в которой будут пересчитаны циклы.\n\n+ **cycle** — определяет цикл, или список циклов для пересчета.\t\n\t\n\t+ Может передаваться только как [одно или список][14] [чисел][5].\n\t\n**ПРИМЕРЫ**\n\n*cycles_table*\n\t*calcs_table_1* (вызывает пересчет *calcs_table_3*)\n\t*calcs_table_2*\n\t*calcs_table_3*\n\t\n\n```totum\nexample: reCalculateCycle(table: 'cycles_table'; cycle: 3)\n\n\/\/ Результат: Будет пересчитана *calcs_table_1*, пересчет которой вызовет пересчет *calcs_table_3*, затем пересчитается *calcs_table_2*\n```","d":false,"markdownfile":[{"ext":"md","file":"343_106_markdownfile.md","name":"func_reCalculateCycle.md","size":1459}]},{"name":"linkToTable","n":["table"],"t":"(table: ''; cycle: ; hash: ; title: ; filter: '' = ; field: '' = ; target: \"iframe|blank|self|parent|top|top-iframe\"; width: 800; refresh: false; header: true; footer: true)","m":["field","filter"],"kategoriya_funkcii":"10","zapolnit_shablon":null,"p":["table","field","refresh","cycle","hash","target","filter","width","header","footer","title"],"markdown_text":"### <a name=\"fn-linkToTable\"><\/a>linkToTable\n\nСложность: **<4>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: linkToTable(table: ''; cycle: ; hash: ; title: ; filter: '' = ; field: '' = ; target: \"iframe|blank|self|parent|top|top-iframe\"; width: 800; refresh: false; header: true; footer: true)\n```\nОткрывает указанную таблицу способом определенным в `target`.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name открываемой таблицы.\n\n\n**Необязательные параметры**\n\n+ **title** — [строка][6], заголовок отображаемый в открытом окне для `iframe` и `top-iframe`.\n\n+ **filter** — [name-параметр][3] значение поля [префильтра][33]. Левая часть определяет поле, а правое его значение. \n\t\n\t+ Множественный параметр — если указано несколько, то значения будут переданы нескольким полям [префильтра][33].\n\t+ Параметр может отсутствовать, тогда таблица будет открыта с параметрами фильтров по умолчанию.\n\t+ Может передаваться как: [число][5], [строка][6], [дата][7] или [булевое значение][8], как [одним значением][14], так и [списком][14], в зависимости от типа префильтра. Для корректной работы, передаваемые данные должны соответствовать типу поля.\n\n+ **field** — [name-параметр][3] значение поля [строчной части][13]. Левая часть определяет поле, а правое его значение. При наличии хотя бы одного параметра будет открыта строка добавления с введенными значениями переданных полей. \n\t\n\t+ Множественный параметр — если указано несколько параметров, то значения будут переданы нескольким полям.\n\t+ Параметр может отсутствовать, тогда таблица будет открыта без открытия строки добавления.\n\t+ Передача значения таким образом может быть осуществлена только полю с активной настройкой «Показывать в WEB».\n\t+ Может передаваться как: [число][5], [строка][6], [дата][7] или [булевое значение][8], может быть как [одним значением][14], так и [списком][14]. Для корректной работы, передаваемые данные должны соответствовать типу поля.\n\n+ **refresh** — определяет будет ли обновлятся таблица-родитель при закрытии окна для варианта `iframe` параметра `target:`.\n\t\n\t+ `true` при необходимости обновить данные.\n\t+  При отсутствии принимается равным `false`.\n\n+ **cycle** — [число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n\n+ **target** — каким образом будет открыта таблица.\n\t\n\t+ Передается как [одна][14] [строка][6]:\n\t\n\t\t+ `iframe` — в iframe внутри текущего окна.\n\t\t+ `blank` — в новом окне (для корректной работы требуется разрешить открытие всплывающих окон в браузере)\n\t\t+ `parent` — в родительском окне, когда у пользователя уже открыто несколько вложенных друг в друга окон.\n\t\t+ `self` — в текущем окне.\n\t\t+ `top-iframe` — в iframe поверх остальных окон.\n\t\t+ Если не указан — обрабатывается как `self`\n\n+ **width** — определяет ширину окна в пикселях для варианта `iframe` параметра `target:`.\n\n\t+ Передается как [число][5] если требуется указать конкретный размер.\n\t+ Передается как [строка][6] формата `\"80vw\"` если требуется указать относительный размер в процентах.\n\t+ При отсутствии размер окна определяется программой самостоятельно в зависимости от базовой ширины открываемой таблицы.\n\n\n+ **header** — определяет будет ли показан хэдер в открытом окне при показе в `iframe` и `top-iframe`. \n\n\t+ `false` при необходимости скрыть.\n\t+  При отсутствии принимается равным `true`.\n\n+ **footer** — определяет будет ли показан футер в открытом окне при показе в `iframe` и `top-iframe`.\n\n\t+ `false` при необходимости скрыть.\n\t+  При отсутствии принимается равным `true`.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: linkToTable(table: 'tablename'; title: \"Открываемая таблица\"; filter: 'fl_id' = 10; field: 'fieldname' = \"Данные передаваемые в поле\"; target: \"top-iframe\"; width: \"80vw\"; refresh: true)\n```","d":false,"markdownfile":[{"ext":"md","file":"343_49_markdownfile.md","name":"func_linkToTable.md","size":6132}]},{"name":"linkToScript","n":["uri"],"t":"(uri: \"http:\/\/\"; post: \"\" = ; title: ; target: \"iframe|blank|self|parent|top|top-iframe\"; width: 800; refresh: false)","m":["post"],"kategoriya_funkcii":"10","zapolnit_shablon":null,"p":["target","width","uri","post","refresh","title"],"markdown_text":"### <a name=\"fn-linkToScript\"><\/a>linkToScript\n\nСложность: **<5>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: linkToScript(uri: \"http:\/\/\"; post: \"\" = ; title: ; target: \"iframe|blank|self|parent|top|top-iframe\"; width: 800; refresh: false)\n```\nВызывает сторонний скрипт с передачей ему значений через POST.\n\n\n**Обязательные параметры**\n\n+ **uri** — [строка][6], адрес по которому открывается скрипт.\n\n\n**Необязательные параметры**\n\n+ **post** — [строка][6], параметры передаваемые скрипту в формате POST.\n\n\t+ При отсутствии параметра данные не передаются.\n\n+ **title** — [строка][6], заголовок отображаемый в открытом окне для `iframe` и `top-iframe`.\n\n+ **target** — каким образом будет открыта таблица.\n\t\n\t+ Передается как [одна][14] [строка][6]:\n\t\n\t\t+ `iframe` — в iframe внутри текущего окна.\n\t\t+ `blank` — в новом окне (для корректной работы требуется разрешить открытие всплывающих окон в браузере)\n\t\t+ `parent` — в родительском окне, когда у пользователя уже открыто несколько вложенных друг в друга окон.\n\t\t+ `self` — в текущем окне.\n\t\t+ `top-iframe` — в iframe поверх остальных окон.\n\t\t+ Если не указан — обрабатывается как `self`\n\n+ **width** — определяет ширину окна в пикселях для варианта `iframe` параметра `target:`.\n\n\t+ Передается как [число][5] если требуется указать конкретный размер.\n\t+ Передается как [строка][6] формата `\"80vw\"` если требуется указать относительный размер в процентах.\n\t+ При отсутствии размер окна определяется программой самостоятельно в зависимости от базовой ширины открываемой таблицы.\n\n\n+ **refresh** — определяет будет ли обновлятся таблица-родитель при закрытии окна для варианта `iframe` параметра `target:`.\n\t\n\t+ `true` при необходимости обновить данные.\n\t+  При отсутствии принимается равным `false`.\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: linkToScript(uri: \"https:\/\/wmdao.ru\"; title: \"wmdao.ru\"; target: \"iframe\"; width: 800; refresh: false)\n```","d":false,"markdownfile":[{"ext":"md","file":"343_51_markdownfile.md","name":"func_linkToScript.md","size":2935}]},{"name":"linkToDataText","n":["title","text"],"t":"(title: ; text: )","m":[],"kategoriya_funkcii":"10","zapolnit_shablon":null,"p":["text","title"],"markdown_text":"### <a name=\"fn-linkToDataText\"><\/a>linkToDataText\n\nСложность: **<2>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: linkToDataText(title: ; text: )\n```\nВызывает в веб-интерфейсе пользователя окно сообщения с текстовым содрежимым.\n\n\n**Обязательные параметры**\n\n+ **title** — [строка][6], заголовок окна.\n\n+ **text** — [строка][6], заданный текст.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: linkToDataText(title: \"Внимание\"; text: \"Ваше изменение принято\")\n\n```","d":false,"markdownfile":[{"ext":"md","file":"343_70_markdownfile.md","name":"func_linkToDataText.md","size":661}]},{"name":"linkToDataTable","n":["title","table"],"t":"(table: ''; title: ; width: 800; height: \"80vh\"; data: $rowList; params: $row; refresh: false; header: true; footer: true)","m":[],"kategoriya_funkcii":"10","zapolnit_shablon":null,"p":["header","footer","width","data","refresh","table","title","params","height"],"markdown_text":"### <a name=\"fn-linkToDataTable\"><\/a>linkToDataTable\n\nСложность: **<5>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: linkToDataTable(table: ''; title: ; width: 800; height: \"80vh\"; data: $rowList; params: $row; refresh: false; header: true; footer: true)\n```\nВызывает в веб-интерфейсе пользователя окно с временной таблицей.\n\n\n**Обязательные параметры**\n\n+ **title** — [строка][6], заголовок окна.\n\n+ **table** — [name-параметр][3] name вызываемой временной таблицы.\n\n\n**Необязательные параметры**\n\n+ **header** — определяет будет ли показан хэдер в открытом окне при показе в `iframe` и `top-iframe`. \n\n\t+ `false` при необходимости скрыть.\n\t+  При отсутствии принимается равным `true`.\n\t\n+ **footer** — определяет будет ли показан футер в открытом окне при показе в `iframe` и `top-iframe`.\n\n\t+ `false` при необходимости скрыть.\n\t+  При отсутствии принимается равным `true`.\n\t\n+ **width** — определяет ширину окна в пикселях для варианта `iframe` параметра `target:`.\n\n\t+ Передается как [число][5] если требуется указать конкретный размер.\n\t+ Передается как [строка][6] формата `\"80vw\"` если требуется указать относительный размер в процентах.\n\t+ При отсутствии размер окна определяется программой самостоятельно в зависимости от базовой ширины открываемой таблицы.\n\n+ **data** — [список][14] [ассоциированных массивов][30] для заполнения строчной части таблицы. В качестве ключей должны быть `name` полей строчной части.\n\n+ **refresh** — определяет будет ли обновлятся таблица-родитель при закрытии окна для варианта `iframe` параметра `target:`.\n\t\n\t+ `true` при необходимости обновить данные.\n\t+  При отсутствии принимается равным `false`.\n\t\n+ **params** — [ассоциированный массив][30] для заполнения нестрочных частей таблицы. В качестве ключей должны быть `name` полей нестрочной части таблицы.\n\n+ **height** — определяет высоту окна в пикселях для варианта `iframe` параметра `target:`.\n\n\t+ Передается как [число][5] если требуется указать конкретный размер.\n\t+ Передается как [строка][6] формата `\"80vh\"` если требуется указать относительный размер в процентах.\n\t+ При отсутствии размер окна определяется программой самостоятельно в зависимости от высоты окна в котором открывается текущее окно.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: linkToDataTable(table: 'tmp_test'; title: \"Окно временного расчета\"; width: 800; height: \"80vh\"; data: $rowList; params: $row; refresh: false; header: true; footer: true)\n\trowList: jsonExtract(text: '[{\"field1\":1, \"field2\":2},{\"field1\":3, \"field2\":4}]')\n\trow: jsonExtract(text: '{\"f_summ_1\":4, \"f_summ_2\":6}')\n\n\/\/ Результат: \n```\n\n**Окно временного расчета**\n\n| id | field1 | field2 |\n|--|--|--|\n| 1  | 1 | 2 |\n| 2  | 3 | 4 |\n| f  | 4 | 6 |","d":false,"markdownfile":[{"ext":"md","file":"343_71_markdownfile.md","name":"func_linkToDataTable.md","size":4087}]},{"name":"linkToDataHtml","n":["title","html"],"t":"(title: ; html: )","m":[],"kategoriya_funkcii":"10","zapolnit_shablon":null,"p":["title","html"],"markdown_text":"### <a name=\"fn-linkToDataHtml\"><\/a>linkToDataHtml\n\nСложность: **<2>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: linkToDataHtml(title: ; html: )\n```\nВызывает в веб-интерфейсе пользователя окно сообщения с html содрежимым.\n\n\n**Обязательные параметры**\n\n+ **title** — [строка][6], заголовок окна.\n\n+ **text** — [строка][6], заданный html.","d":false,"markdownfile":[{"ext":"md","file":"343_72_markdownfile.md","name":"func_linkToDataHtml.md","size":501}]},{"name":"linkToPanel","n":["table"],"t":"(table: ''; id: ; field: '' = ; refresh: false)","m":["field"],"kategoriya_funkcii":"10","zapolnit_shablon":null,"p":["table","id","refresh","field"],"markdown_text":"### <a name=\"fn-linkToPanel\"><\/a>linkToPanel\n\nСложность: **<3>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: linkToPanel(table: ''; id: ; field: '' = ; refresh: false)\n```\nОткрывает строку таблицы в виде панели.\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы из которой будет открываться строка.\n\n\n**Необязательные параметры**\n\n+ **id** — [число][5], id открываемой строки.\n\n+ **field** — [name-параметр][3] поле в таблице `table:`.\n\n+ **refresh** — определяет будет ли обновлятся таблица-родитель при закрытии окна для варианта `iframe` параметра `target:`.\n\t\n\t+ `true` при необходимости обновить данные.\n\t+  При отсутствии принимается равным `false`.\n\t\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: linkToPanel(table: 'tablename'; id: $num; refresh: true)\n\tnum: 10\n\t\n\/\/ Результат: открывает строку id=10 таблицы tablename в панели.\n```","d":false,"markdownfile":[{"ext":"md","file":"343_7_markdownfile.md","name":"func_linkToPanel.md","size":1255}]},{"name":"linkToPrint","n":["data","template"],"t":"(template: ; data: $data)","m":[],"kategoriya_funkcii":"10","zapolnit_shablon":null,"p":["data","template"],"markdown_text":"","d":false,"markdownfile":null},{"name":"getFromScript","n":["uri"],"t":"(uri: \"http:\/\/\"; posts: ; gets: )","m":["post"],"kategoriya_funkcii":"10","zapolnit_shablon":null,"p":["uri","post","timeout","bfl","header","gets","posts","headers"],"markdown_text":"### <a name=\"fn-getFromScript\"><\/a>getFromScript\n\nСложность: **<0>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: getFromScript(uri: \"http:\/\/\"; posts: ; gets: )\n```\nВозвращает ...\n\n\n**Обязательные параметры**\n\n+ **uri** — \n\n\n\n**Необязательные параметры**\n\n+ **post** — \n+ **timeout** — \n+ **bfl** — \n+ **header** — определяет будет ли показан хэдер в открытом окне при показе в `iframe` и `top-iframe`. \n\n\t+ `false` при необходимости скрыть.\n\t+  При отсутствии принимается равным `true`.\n+ **gets** — \n+ **posts** — \n+ **headers** — \n\nuri - путь к скрипту\npost пост поле в формате \"field\" = $val\ntimeout - ограничение времени запроса в секундах\nbfl - true|false - писать ли данные в bfl-лог. При отсутствии берет настройку из secttings\nheader - возвращать ли заголовок вместе с телом ответа\ngets - список GET параметров\nposts - список POST параметров или строка тела POST-запроса\n\n**ПРИМЕРЫ**\n\n```totum\nexample: getFromScript(uri: \"http:\/\/\"; posts: ; gets: )\n\/\/Результат: \n```","d":false,"markdownfile":[{"ext":"md","file":"343_52_markdownfile.md","name":"func_getFromScript.md","size":1413}]},{"name":"getFromSoap","n":["func"],"t":"(func: ; params: ; wsdl: ; options: )","m":[],"kategoriya_funkcii":"10","zapolnit_shablon":null,"p":["params","func","wsdl","options","bfl"],"markdown_text":"### <a name=\"fn-getFromSoap\"><\/a>getFromSoap\n\nСложность: **<0>**; \n\nДоступен в секциях: [Код действия][28].\n```totum\n=: getFromSoap(func: ; params: ; wsdl: ; options: )\n```\nВозвращает данные, полученные из запроса к функции soap-сервиса. Может использоваться для синхронизации с 1с с поднятым wep-сервисом. При ошибках коннекта или soap-переменных, а также при ошибке на стороне  soap-сервера выбрасывает исключение (ничего не сохраняется за всю операцию). Исключение можно (если нужно записать статус ошибки или отправить сообщение администратору) отловить, обернув soap-вызов в функцию tryCatch.\n\n\n**Обязательные параметры**\n\n+ **func** — \n\n\n\n**Необязательные параметры**\n\n+ **params** — \n+ **wsdl** — \n+ **options** — \n+ **bfl** — \n\n\n\n**ПРИМЕРЫ**\n\n$#options: {\n    \"login\": \"login\",\n    \"features\": 1,\n    \"password\": \"pass\"\n}\n\n\n```totum\nexample: getFromSoap(func: \"funcName\"; params: $#params; wsdl: \"https:\/\/path.to.wsdl\"; options: $#options)\n\/\/Результат: \n```","d":false,"markdownfile":[{"ext":"md","file":"343_94_markdownfile.md","name":"func_getFromSoap.md","size":1397}]},{"name":"emailSend","n":["title","to","body"],"t":"(to: ; title: ; body: ; from: ; files: )","m":[],"kategoriya_funkcii":"10","zapolnit_shablon":null,"p":["to","from","title","body","files","bfl"],"markdown_text":"","d":false,"markdownfile":null},{"name":"setFormat","n":[],"t":"(condition: ; block: ; color: ; bold: ; background: ; decoration: ; italic: ; progress: ; progresscolor: ; icon: ; text: )","m":["condition"],"kategoriya_funkcii":"11","zapolnit_shablon":null,"p":["condition","block","color","bold","background","decoration","italic","progress","progresscolor","text","icon","comment","hideinpanel","tab","align"],"markdown_text":"### <a name=\"fn-setFormat\"><\/a>setFormat\n\nСложность: **<2>**; \n\nДоступен в секциях: Форматирование [ячейки][39].\n```totum\n=: setFormat(condition: ; block: ; color: ; bold: ; background: ; decoration: ; italic: ; progress: ; progresscolor: ; icon: ; text: )\n```\nИзменяет внешний вид ячейки по условиям `condition:`. Результаты работы функции применяются к ячейке последовательно в соответствии с индексами `f1=:`, `f2=:`, `f3=:` и.т.д. `setFormat` имеет преимущество над `setRowFormat` при пересечении условий форматирования.\n\n\n**Необязательные параметры**\n\n+ **condition** — условие срабатывания вида `\"значение 1\" = \"значение 2\"`.\n\t\n\t+ Поле множественное.\n\t+ Выполняется последовательно.\n\t+ Если одно из `condition:` выполнилось в `false`, то ни последующие, ни `then:` рассчитаны не будут. \n\t+ Обе части могут передаваться как: [число][5], [строка][6], [дата][6] или [булевое значение][8].\n\t+ Обе части могут быть как [одним значением][14], так и [списком][14]. В зависимости от этого могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Возможны все [операторы сравнения][2].\n\t\n+ **block** — блокировка ячейки. \n\t\n\t+ `true` — заблокировано.\n\t+ `false` — разблокировано.\n\n+ **color** — цвет текста ячейки. \n\t\n\t+ Передается как [одна][14] [строка][6].\n\t+ В формате HEX `#ff00cc`.\n\t+ Либо текстовым определением цвета HTML, например — `tomato`.\n\n+ **bold** — жирное начертание текста в ячейке. \n\t\n\t+ `true` — жирное.\n\t+ `false` — разблокировано.\n\n+ **background** — цвет заливки ячейки.\n\n\t+ Передается как [одна][14] [строка][6].\n\t+ В формате HEX `#ff00cc`.\n\t+ Либо текстовым определением цвета HTML, например — `tomato`.\n\n+ **decoration** — подчеркивание текста в ячейке.\n\n\t+ `true` — подчеркнутое.\n\t+ `false` — неподчеркнутое.\n\n+ **italic** — курсив для текста в ячейке.\n\n\t+ `true` — курсив.\n\t+ `false` — обычное начертание.\n\n+ **progress** — длина маркерного выделения текста в ячейке. \n\t\n\t+ Передается как [одно][14] [число][5].\n\t+ `0` — без выделения.\n\t+ `100` — выделен весь текст.\n\n+ **progresscolor** — цвет маркерного выделения текста в ячейке. \n\n\t+ Передается как [одна][14] [строка][6].\n\t+ В формате HEX `#ff00cc`.\n\t+ Либо текстовым определением цвета HTML, например — `tomato`.\n\n+ **text** — выводит заданный текст подменяющий отображение значения в ячейке. Не влияет на данные хранящиеся в этой ячейке.\n\n\t+ Передается как [одна][14] [строка][6].\n\n+ **icon** — выводит иконку слева от значения ячейки.\n\n\t+ Передается как [одна][14] [строка][6].\n\t+ Значение иконки в `fontawesome 4` без приставки `fa-`. Например: `shower`.\n\n+ **comment** — добавляет в ячейку иконку `i` слева от значения, при наведении на которую показывается текст комментария.\n\n\t+ Передается как [одна][14] [строка][6].\n\n+ **hideinpanel** — скрывает поле в панели.\n\n\t+ `true` — скрыть.\n\t+ `false` — открыть.\n\n+ **tab** — устанавливает отступ слева в ячейке у значения или его отображения.\n\n\t+ Передается как [одно][14] [число][5] — количество пикселей.\n\n+ **align** — выравниванивание значения или отображения в ячейке.\n\n\t+ Передается как [одна][14] [строка][6].\n\t+ `center` — по центру.\n\t+ `right` — по правому краю.","d":false,"markdownfile":[{"ext":"md","file":"343_4_markdownfile.md","name":"func_setFormat.md","size":4927}]},{"name":"setRowFormat","n":[],"t":"(condition: ; block: ; blockdelete: ; blockorder: ; blockduplicate: ; color: ; bold: ; background: ; decoration: ; italic: ; )","m":["condition"],"kategoriya_funkcii":"11","zapolnit_shablon":null,"p":["condition","block","color","bold","background","decoration","italic","blockdelete","blockorder","blockduplicate"],"markdown_text":"### <a name=\"fn-setRowFormat\"><\/a>setRowFormat\n\nСложность: **<3>**; \n\nДоступен в секциях: Форматирование [строки][40].\n```totum\n=: setRowFormat(condition: ; block: ; blockdelete: ; blockorder: ; blockduplicate: ; color: ; bold: ; background: ; decoration: ; italic: ; )\n```\nНастройка форматирования строк для всей таблицы по условиям `condition:`. Результаты работы функции применяются к таблице последовательно в соответствии с индексами `f1=:`, `f2=:`, `f3=:` и.т.д. `setRowFormat` имеет преимущество над `setTableFormat` при пересечении условий.\n\n\n**Необязательные параметры**\n\n+ **condition** — условие срабатывания вида `\"значение 1\" = \"значение 2\"`.\n\t\n\t+ Поле множественное.\n\t+ Выполняется последовательно.\n\t+ Если одно из `condition:` выполнилось в `false`, то ни последующие, ни `then:` рассчитаны не будут. \n\t+ Обе части могут передаваться как: [число][5], [строка][6], [дата][6] или [булевое значение][8].\n\t+ Обе части могут быть как [одним значением][14], так и [списком][14]. В зависимости от этого могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Возможны все [операторы сравнения][2].\n\t\n+ **block** — блокировка изменений в строке, в том числе удаления, перемещения и дублирования. \n\t\n\t+ `true` — заблокировано.\n\t+ `false` — разблокировано.\n\t\n+ **color** — цвет текста строки. \n\t\n\t+ Передается как [одна][14] [строка][6].\n\t+ В формате HEX `#ff00cc`.\n\t+ Либо текстовым определением цвета HTML, например — `tomato`.\n\t\n+ **bold** — жирное начертание текста в строке. \n\t\n\t+ `true` — жирное.\n\t+ `false` — разблокировано.\n\t\n+ **background** — цвет заливки строки.\n\n\t+ Передается как [одна][14] [строка][6].\n\t+ В формате HEX `#ff00cc`.\n\t+ Либо текстовым определением цвета HTML, например — `tomato`.\n\t\n+ **decoration** — подчеркивание текста во всей строке.\n\n\t+ `true` — подчеркнутое.\n\t+ `false` — неподчеркнутое.\n\t\n+ **italic** — курсив для текста в встроке.\n\n\t+ `true` — курсив.\n\t+ `false` — обычное начертание.\n\t\n+ **blockdelete** — блокировка удаления строки.\n\n\t+ `true` — заблокировано.\n\t+ `false` — разблокировано.\n\n+ **blockorder** — блокировка сортировки по `n`.\n\n\t+ `true` — заблокировано.\n\t+ `false` — разблокировано.\n\n+ **blockduplicate** — блокировка дублирования.\n\n\t+ `true` — заблокировано.\n\t+ `false` — разблокировано.","d":false,"markdownfile":[{"ext":"md","file":"343_5_markdownfile.md","name":"func_setRowFormat.md","size":3542}]},{"name":"setTableFormat","n":[],"t":"(condition: ; blockdelete: ; blockadd: ; blockorder: ; blockduplicate: )","m":["condition"],"kategoriya_funkcii":"11","zapolnit_shablon":null,"p":["condition","blockdelete","blockduplicate","blockorder","blockadd","block"],"markdown_text":"### <a name=\"fn-setTableFormat\"><\/a>setTableFormat\n\nСложность: **<3>**; \n\nДоступен в секциях: Форматирование [таблицы][41].\n```totum\n=: setTableFormat(condition: ; blockdelete: ; blockadd: ; blockorder: ; blockduplicate: )\n```\nУсловия форматирования применяемые ко всей таблице включая хэдер и футер.\n\n\n**Необязательные параметры**\n\n+ **condition** — условие срабатывания вида `\"значение 1\" = \"значение 2\"`.\n\t\n\t+ Поле множественное.\n\t+ Выполняется последовательно.\n\t+ Если одно из `condition:` выполнилось в `false`, то ни последующие, ни `then:` рассчитаны не будут. \n\t+ Обе части могут передаваться как: [число][5], [строка][6], [дата][6] или [булевое значение][8].\n\t+ Обе части могут быть как [одним значением][14], так и [списком][14]. В зависимости от этого могут получатся различные комбинации сравнений: [один к одному][19], [один ко многим][21], [многие ко многим][21].\n\t+ Возможны все [операторы сравнения][2].\n\t\n+ **blockdelete** — блокировка удаления строк.\n\n\t+ `true` — заблокировано.\n\t+ `false` — разблокировано.\n\n+ **blockduplicate** — блокировка дублирования.\n\n\t+ `true` — заблокировано.\n\t+ `false` — разблокировано.\n\n+ **blockorder** — блокировка сортировки по `n`.\n\n\t+ `true` — заблокировано.\n\t+ `false` — разблокировано.\n\n+ **blockadd** — блокировка добавления строк в таблицу.\n\n\t+ `true` — заблокировано.\n\t+ `false` — разблокировано.\n\n+ **block** — блокировка изменений в таблице, в том числе удаления, перемещения и дублирования. \n\t\n\t+ `true` — заблокировано.\n\t+ `false` — разблокировано.","d":false,"markdownfile":[{"ext":"md","file":"343_6_markdownfile.md","name":"func_setTableFormat.md","size":2346}]},{"name":"jsonCreate","n":[],"t":"(data: ; field: \"\" = )","m":["field"],"kategoriya_funkcii":"12","zapolnit_shablon":null,"p":["data","field"],"markdown_text":"### <a name=\"fn-jsonCreate\"><\/a>jsonCreate\n\nСложность: **<1>**\n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n\n```totum\n=: jsonCreate(data: ; field: \"\" = )\n```\nВозвращает [одну][14] [строку][6] в формате json.\n\n\n**Необязательные параметры**\n\n+ **data** — данные любого формата.\n\n+ **field** — ключ и значение для добавления в формируемый json. Если ключа нет, то он будет добавлен, если есть, то переписан с новым значением.\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: jsonCreate(data: $data; field: \"c\" = 3; field: \"b\" = 4)\n\tdata: rowCreate(field: \"a\" = 1; field: \"b\" = 2)\n\t\n\/\/ Результат: {\"a\":1,\"b\":4,\"c\":3}\n```","d":false,"markdownfile":[{"ext":"md","file":"343_11_markdownfile.md","name":"func_jsonCreate.md","size":956}]},{"name":"jsonExtract","n":["text"],"t":"(text: )","m":[],"kategoriya_funkcii":"12","zapolnit_shablon":null,"p":["text"],"markdown_text":"### <a name=\"fn-jsonExtract\"><\/a>jsonExtract\n\nСложность: **<1>**\n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n\n```totum\n=: jsonExtract(text: )\n```\nВозвращает данные из json-строки или `null`, если формат строки не json.\n\n\n**Обязательные параметры**\n\n+ **text** — текст в формате json.\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: jsonExtract(text: \"[1,2,3,4]\")\n\n\/\/ Результат - лист из значений 1,2,3,4\n```","d":false,"markdownfile":[{"ext":"md","file":"343_10_markdownfile.md","name":"func_jsonExtract.md","size":669}]},{"name":"fileGetContent","n":["file"],"t":"(file: )","m":[],"kategoriya_funkcii":"14","zapolnit_shablon":null,"p":["file"],"markdown_text":"","d":false,"markdownfile":null},{"name":"tableLog","n":["table","field"],"t":"(table: ''; cycle: ; id: ; field: ; comment: )","m":[],"kategoriya_funkcii":"15","zapolnit_shablon":null,"p":["table","cycle","id","field","comment"],"markdown_text":"","d":false,"markdownfile":null},{"name":"tableLogSelect","n":["from","to","users"],"t":"(from: ; to: ; users: ; order: )","m":[],"kategoriya_funkcii":"15","zapolnit_shablon":null,"p":["from","to","users","order"],"markdown_text":"","d":false,"markdownfile":null},{"name":"normalizeN","n":["table","num"],"t":"(table: ; num: )","m":[],"kategoriya_funkcii":"15","zapolnit_shablon":null,"p":["table","num"],"markdown_text":"### <a name=\"fn-normalizeN\"><\/a>normalizeN\n\nСложность: **5**; \nДоступен в секциях: **Код действия**\n```totum\n=: normalizeN(table: ; num: )\n```\nВозвращает `null`\n\nПроизводит нормализацию `n-поля` сортируемой по `n` простой таблицы — присваивает целые значения, убирая дробные \"хвосты\".\nСлужебная функция. Если простая таблица с n-сортировкой часто испытывает вставку не в конец, а где-то между строк — следует поставить ее нормализацию на крон.\n\n**Обязательные параметры**\n\n+ **table** — name таблицы.\n\n+ **num** — длина хвоста, при достижении которого проводить нормализацию. Рекомендуется 12.\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: normalizeN(table: 'table_name'; num: 12)\n\n\/\/Результат: в таблице table_name будут переназначены на целые числа все значения поля n в порядке поля n\n```","d":false,"markdownfile":[{"ext":"md","file":"343_112_markdownfile.md","name":"func_normalizeN.md","size":1232}]},{"name":"userInRoles","n":["role"],"t":"(role: )","m":["role"],"kategoriya_funkcii":"15","zapolnit_shablon":null,"p":["role"],"markdown_text":"","d":false,"markdownfile":null},{"name":"getTableSource","n":["table"],"t":"(table: ; cycle: ; hash: ; fields: ; ids: )","m":[],"kategoriya_funkcii":"15","zapolnit_shablon":null,"p":["table","cycle","hash","id","fields","ids"],"markdown_text":"### <a name=\"fn-getTableSourse\"><\/a>getTableSource\n\nСложность: **<0>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: getTableSourse(table: ; cycle: ; hash: ; fields: ; id: )\n```\nВозвращает row из полных данных таблицы\n\t+ Для простых таблиц выгружает удаленные строки только если в fields есть  is_del\n\t+ Для таблиц циклов выгружает все таблицы циклов для каждой запрошенной строки\n\n\n**Обязательные параметры**\n\n+ **table** — [name-параметр][3] name таблицы из которой берутся данные.\n\n\n\n**Необязательные параметры**\n\n+ **cycle** — определяет цикл, если таблица `table:` является [расчетной в цикле][1].\t\n\t\n\t+ Может передаваться только как [одно или список][14] [чисел][5].\n\t+ Параметр отсутствует, если таблица `table:` находится в [дереве][15].\n\t\n[число][5], [одно или список][14], определяет цикл, если таблица `table:` является [расчетной в цикле][1].\n+ **hash** — [строка][6], для [временных таблиц][42] hash таблицы.\n+ **id** - [одно или список][14] id строк для выгрузки. Только для нерасчетных таблиц\n+ **fields** - поля для выгрузки. Только для нерасчетных таблиц\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: getTableSourse(table: 'globcalcs_test_table')\n\/\/ Результат: {\n\/\/  \"rows\": {\n\/\/    \"1\": {\n\/\/      \"_E\": true,\n\/\/      \"id\": 1,\n\/\/      \"test1\": {\n\/\/        \"v\": \"1\"\n\/\/      },\n\/\/      \"dannie\": null,\n\/\/      \"is_del\": true,\n\/\/      \"testmd5\": null\n\/\/    }\n\/\/  },\n\/\/  \"nextId\": 8,\n\/\/  \"params\": {\n\/\/    \"test\": {\n\/\/      \"v\": \"37\"\n\/\/    }\n\/\/  }\n\/\/}\n```","d":false,"markdownfile":[{"ext":"md","file":"343_115_markdownfile.md","name":"func_getTableSource.md","size":2219}]},{"name":"sysTranslit","n":["str"],"t":"(str: )","m":[],"kategoriya_funkcii":"15","zapolnit_shablon":null,"p":["str"],"markdown_text":"### <a name=\"fn-sysTranslit\"><\/a>sysTranslit\n\nСложность: **<0>**; \n\nДоступен в секциях: [Код][27]; [Код действия][28]; [Код селекта][4]; Форматирование [ячейки][39], [строки][40], [таблицы][41].\n```totum\n=: sysTranslit(str: )\n```\nВозвращает транслитерированную строку с пробелами замененными на _ и удаленными небуквенно-циферными символами\n\n\n**Обязательные параметры**\n\n+ **str** — [одна][14] [строка][6] или [число][5]\n\n\n\n**ПРИМЕРЫ**\n\n```totum\nexample: sysTranslit(str: \"Мама рама\")\n\/\/Результат: mama_rama\n```","d":false,"markdownfile":[{"ext":"md","file":"343_118_markdownfile.md","name":"func_sysTranslit.md","size":755}]},{"name":"getTableUpdated","n":["table"],"t":"(table: ; cycle: )","m":[],"kategoriya_funkcii":null,"zapolnit_shablon":null,"p":["table","cycle"],"markdown_text":"","d":false,"markdownfile":null},{"name":"getUsingFields","n":["field","table"],"t":"(table: ; field: )","m":[],"kategoriya_funkcii":"15","zapolnit_shablon":null,"p":["table","field"],"markdown_text":"","d":false,"markdownfile":null},{"name":"listTrain","n":["list"],"t":"(list: )","m":[],"kategoriya_funkcii":"6","zapolnit_shablon":null,"p":["list"],"markdown_text":"","d":false,"markdownfile":null},{"name":"xmlExtract","n":["xml","attrpref"],"t":"(xml: ; attrpref: \"__\"; textname: \"TEXT\")","m":[],"kategoriya_funkcii":"16","zapolnit_shablon":null,"p":["xml","attrpref","textname"],"markdown_text":"","d":false,"markdownfile":null}]