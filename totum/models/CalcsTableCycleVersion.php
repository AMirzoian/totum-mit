<?php
/**
 * Created by PhpStorm.
 * User: tatiana
 * Date: 2019-02-28
 * Time: 13:43
 */

namespace totum\models;


use totum\common\errorException;
use totum\common\Model;
use totum\common\Sql;
use totum\tableTypes\tableTypes;

class CalcsTableCycleVersion extends model
{
    static protected $version_hash, $defaultVersions = [];
    protected static $tableCycleVersions = [];


    protected static function setVersionHash()
    {
        while (static::$version_hash == ($nRand = mt_rand())) ;
        static::$defaultVersions = [];
        static::$tableCycleVersions = [];
        static::$version_hash = $nRand;
    }

    public static function getVersionHash()
    {
        return self::$version_hash;
    }

    protected function __construct($table, $idField = null, $isService = null)
    {
        static::setVersionHash();
        parent::__construct($table, $idField, $isService);
    }

    public function update($params, $where, $ignore = 0, $oldRow = null): Int
    {
        static::setVersionHash();
        return parent::update($params, $where, $ignore, $oldRow);
    }

    public function insert($vars, $returning = 'idFieldName', $ignore = false)
    {
        static::setVersionHash();
        return parent::insert($vars, $returning, $ignore); // TODO: Change the autogenerated stub
    }

    static function getDefaultVersion($tableName)
    {
        if (!key_exists($tableName, static::$defaultVersions)) {
            static::$defaultVersions[$tableName] = Model::init('calcstable_versions')->getField('version',
                ['table_name' => $tableName, 'is_default' => "true"]);
            if (empty(static::$defaultVersions[$tableName])) throw new errorException('Нет версии по-умолчанию для таблицы ' . $tableName);
        }
        return static::$defaultVersions[$tableName];
    }

    static function getVersionForCycle($tableName, $cycleId)
    {
        $cache_name = $tableName . '/' . $cycleId;
        if (!key_exists($cache_name, static::$tableCycleVersions)) {
            static::$tableCycleVersions[$cache_name] =
                array_values(Model::init('calcstable_cycle_version')->get(
                    ['table_name' => $tableName, 'cycle' => $cycleId],
                    'version, auto_recalc'));
        }
        return static::$tableCycleVersions[$cache_name];
    }

    static function addVersionForCycle($tableName, $cycleId)
    {
        $cache_name = $tableName . '/' . $cycleId;
        $default_version = CalcsTableCycleVersion::getDefaultVersion($tableName);
        tableTypes::getTableByName('calcstable_cycle_version')->reCalculateFromOvers(
            ['add' => [
                ['table_name' => $tableName, 'cycle' => $cycleId, 'version' => $default_version]
            ]]
        );
        return static::$tableCycleVersions[$cache_name] = [$default_version, 'true'];
    }
}